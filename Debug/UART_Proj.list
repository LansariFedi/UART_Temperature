
UART_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002c68  08002c68  00003c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd8  08002cd8  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002cd8  08002cd8  00003cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ce0  08002ce0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce0  08002ce0  00003ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ce4  08002ce4  00003ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002ce8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          000001b4  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010233  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035d5  00000000  00000000  000142bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  00017898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ee  00000000  00000000  000182a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002008d  00000000  00000000  00018a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096e8  00000000  00000000  00038b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4225  00000000  00000000  0004220b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000001e  00000000  00000000  00106430  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ec0  00000000  00000000  00106450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000001b2  00000000  00000000  00108310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00001f3d  00000000  00000000  001084c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f002 fb98 	bl	8002994 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000005c 	.word	0x2000005c
 8000290:	00000000 	.word	0x00000000
 8000294:	08002c50 	.word	0x08002c50

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000060 	.word	0x20000060
 80002b0:	08002c50 	.word	0x08002c50

080002b4 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	80fb      	strh	r3, [r7, #6]
    uint32_t start = DWT ->CYCCNT; // Get the current cycle count
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <delay_us+0x44>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
    us *= (SystemCoreClock / 1000000); // Convert microseconds to clock cycles
 80002c4:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <delay_us+0x48>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <delay_us+0x4c>)
 80002ca:	fba2 2303 	umull	r2, r3, r2, r3
 80002ce:	0c9b      	lsrs	r3, r3, #18
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	88fa      	ldrh	r2, [r7, #6]
 80002d4:	fb12 f303 	smulbb	r3, r2, r3
 80002d8:	80fb      	strh	r3, [r7, #6]
    while ((DWT ->CYCCNT - start) < us); // Wait until the specified time has passed
 80002da:	bf00      	nop
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <delay_us+0x44>)
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3f8      	bcc.n	80002dc <delay_us+0x28>
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e0001000 	.word	0xe0001000
 80002fc:	20000000 	.word	0x20000000
 8000300:	431bde83 	.word	0x431bde83

08000304 <DHT11_Start>:

void DHT11_Start(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8000318:	2302      	movs	r3, #2
 800031a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	480e      	ldr	r0, [pc, #56]	@ (8000368 <DHT11_Start+0x64>)
 800032e:	f000 fc47 	bl	8000bc0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	480c      	ldr	r0, [pc, #48]	@ (8000368 <DHT11_Start+0x64>)
 8000338:	f000 fdf6 	bl	8000f28 <HAL_GPIO_WritePin>
    HAL_Delay(18); // Keep low for at least 18ms
 800033c:	2012      	movs	r0, #18
 800033e:	f000 fb35 	bl	80009ac <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2102      	movs	r1, #2
 8000346:	4808      	ldr	r0, [pc, #32]	@ (8000368 <DHT11_Start+0x64>)
 8000348:	f000 fdee 	bl	8000f28 <HAL_GPIO_WritePin>
    delay_us(40); // Keep high for 20-40us
 800034c:	2028      	movs	r0, #40	@ 0x28
 800034e:	f7ff ffb1 	bl	80002b4 <delay_us>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <DHT11_Start+0x64>)
 800035c:	f000 fc30 	bl	8000bc0 <HAL_GPIO_Init>
}
 8000360:	bf00      	nop
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40020000 	.word	0x40020000

0800036c <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	71fb      	strb	r3, [r7, #7]
    delay_us(40);
 8000376:	2028      	movs	r0, #40	@ 0x28
 8000378:	f7ff ff9c 	bl	80002b4 <delay_us>
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800037c:	2102      	movs	r1, #2
 800037e:	480f      	ldr	r0, [pc, #60]	@ (80003bc <DHT11_CheckResponse+0x50>)
 8000380:	f000 fdba 	bl	8000ef8 <HAL_GPIO_ReadPin>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d10b      	bne.n	80003a2 <DHT11_CheckResponse+0x36>
    {
      delay_us(40);
 800038a:	2028      	movs	r0, #40	@ 0x28
 800038c:	f7ff ff92 	bl	80002b4 <delay_us>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000390:	2102      	movs	r1, #2
 8000392:	480a      	ldr	r0, [pc, #40]	@ (80003bc <DHT11_CheckResponse+0x50>)
 8000394:	f000 fdb0 	bl	8000ef8 <HAL_GPIO_ReadPin>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <DHT11_CheckResponse+0x36>
            response = 1;
 800039e:	2301      	movs	r3, #1
 80003a0:	71fb      	strb	r3, [r7, #7]
    }
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // Wait for the pin to go low
 80003a2:	bf00      	nop
 80003a4:	2102      	movs	r1, #2
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <DHT11_CheckResponse+0x50>)
 80003a8:	f000 fda6 	bl	8000ef8 <HAL_GPIO_ReadPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1f8      	bne.n	80003a4 <DHT11_CheckResponse+0x38>
    return response;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40020000 	.word	0x40020000

080003c0 <DHT11_ReadData>:

uint8_t DHT11_ReadData(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
    uint8_t j;
    uint8_t data = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	71bb      	strb	r3, [r7, #6]
    for (j = 0; j < 8; j++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	71fb      	strb	r3, [r7, #7]
 80003ce:	e028      	b.n	8000422 <DHT11_ReadData+0x62>
    {
        while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // Wait for the pin to go high
 80003d0:	bf00      	nop
 80003d2:	2102      	movs	r1, #2
 80003d4:	4817      	ldr	r0, [pc, #92]	@ (8000434 <DHT11_ReadData+0x74>)
 80003d6:	f000 fd8f 	bl	8000ef8 <HAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f8      	beq.n	80003d2 <DHT11_ReadData+0x12>
        delay_us(40); // Wait for 40us
 80003e0:	2028      	movs	r0, #40	@ 0x28
 80003e2:	f7ff ff67 	bl	80002b4 <delay_us>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80003e6:	2102      	movs	r1, #2
 80003e8:	4812      	ldr	r0, [pc, #72]	@ (8000434 <DHT11_ReadData+0x74>)
 80003ea:	f000 fd85 	bl	8000ef8 <HAL_GPIO_ReadPin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00b      	beq.n	800040c <DHT11_ReadData+0x4c>
        {
            data |= (1 << (7 - j)); // Read 1
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	f1c3 0307 	rsb	r3, r3, #7
 80003fa:	2201      	movs	r2, #1
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	b25a      	sxtb	r2, r3
 8000402:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000406:	4313      	orrs	r3, r2
 8000408:	b25b      	sxtb	r3, r3
 800040a:	71bb      	strb	r3, [r7, #6]
        }
        while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // Wait for the pin to go low
 800040c:	bf00      	nop
 800040e:	2102      	movs	r1, #2
 8000410:	4808      	ldr	r0, [pc, #32]	@ (8000434 <DHT11_ReadData+0x74>)
 8000412:	f000 fd71 	bl	8000ef8 <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f8      	bne.n	800040e <DHT11_ReadData+0x4e>
    for (j = 0; j < 8; j++)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	3301      	adds	r3, #1
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d9d3      	bls.n	80003d0 <DHT11_ReadData+0x10>
    }
    return data;
 8000428:	79bb      	ldrb	r3, [r7, #6]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40020000 	.word	0x40020000

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b093      	sub	sp, #76	@ 0x4c
 800043c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043e:	f000 fa43 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000442:	f000 f859 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000446:	f000 f8eb 	bl	8000620 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800044a:	f000 f8bf 	bl	80005cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  uint8_t humidity_int, humidity_dec, temp_int, temp_dec, checksum;

  while (1)
  {
    DHT11_Start();
 800044e:	f7ff ff59 	bl	8000304 <DHT11_Start>
    if (DHT11_CheckResponse())
 8000452:	f7ff ff8b 	bl	800036c <DHT11_CheckResponse>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d044      	beq.n	80004e6 <main+0xae>
    {
        humidity_int = DHT11_ReadData();
 800045c:	f7ff ffb0 	bl	80003c0 <DHT11_ReadData>
 8000460:	4603      	mov	r3, r0
 8000462:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        humidity_dec = DHT11_ReadData();
 8000466:	f7ff ffab 	bl	80003c0 <DHT11_ReadData>
 800046a:	4603      	mov	r3, r0
 800046c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        temp_int = DHT11_ReadData();
 8000470:	f7ff ffa6 	bl	80003c0 <DHT11_ReadData>
 8000474:	4603      	mov	r3, r0
 8000476:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        temp_dec = DHT11_ReadData();
 800047a:	f7ff ffa1 	bl	80003c0 <DHT11_ReadData>
 800047e:	4603      	mov	r3, r0
 8000480:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        checksum = DHT11_ReadData();
 8000484:	f7ff ff9c 	bl	80003c0 <DHT11_ReadData>
 8000488:	4603      	mov	r3, r0
 800048a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (checksum == (humidity_int + humidity_dec + temp_int + temp_dec))
 800048e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000492:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8000496:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800049a:	4419      	add	r1, r3
 800049c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80004a0:	4419      	add	r1, r3
 80004a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80004a6:	440b      	add	r3, r1
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d11c      	bne.n	80004e6 <main+0xae>
        {
            // Data is valid, process it (e.g., send via UART or display on an LCD)
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "Humidity: %d.%d%%, Temp: %d.%dC\r\n", humidity_int, humidity_dec, temp_int, temp_dec);
 80004ac:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 80004b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80004b4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80004b8:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 80004bc:	4638      	mov	r0, r7
 80004be:	9102      	str	r1, [sp, #8]
 80004c0:	9201      	str	r2, [sp, #4]
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	4623      	mov	r3, r4
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <main+0xb8>)
 80004c8:	2132      	movs	r1, #50	@ 0x32
 80004ca:	f001 fda9 	bl	8002020 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80004ce:	463b      	mov	r3, r7
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fe5d 	bl	8000190 <strlen>
 80004d6:	4603      	mov	r3, r0
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4639      	mov	r1, r7
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <main+0xbc>)
 80004e2:	f001 f9e1 	bl	80018a8 <HAL_UART_Transmit>
        }
    }
    HAL_Delay(2000); // Wait 2 seconds before the next reading
 80004e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004ea:	f000 fa5f 	bl	80009ac <HAL_Delay>
    DHT11_Start();
 80004ee:	e7ae      	b.n	800044e <main+0x16>
 80004f0:	08002c68 	.word	0x08002c68
 80004f4:	20000078 	.word	0x20000078

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fdc0 	bl	800208c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	@ (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000568:	2319      	movs	r3, #25
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000576:	2304      	movs	r3, #4
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fcec 	bl	8000f5c <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058a:	f000 f885 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2105      	movs	r1, #5
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 ff4d 	bl	800144c <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f86e 	bl	8000698 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <MX_USART1_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_USART1_UART_Init+0x4c>)
 8000604:	f001 f900 	bl	8001808 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f843 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000078 	.word	0x20000078
 800061c:	40011000 	.word	0x40011000

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0x70>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <MX_GPIO_Init+0x70>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_GPIO_Init+0x70>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0x70>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <MX_GPIO_Init+0x70>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_GPIO_Init+0x70>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066e:	2302      	movs	r3, #2
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0x74>)
 8000682:	f000 fa9d 	bl	8000bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_UART_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_UART_MspInit+0x88>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6453      	str	r3, [r2, #68]	@ 0x44
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_UART_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800074e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000760:	2307      	movs	r3, #7
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_UART_MspInit+0x8c>)
 800076c:	f000 fa28 	bl	8000bc0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40011000 	.word	0x40011000
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f8c7 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f001 fc42 	bl	800209c <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20020000 	.word	0x20020000
 8000844:	00000400 	.word	0x00000400
 8000848:	200000c0 	.word	0x200000c0
 800084c:	20000210 	.word	0x20000210

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000878:	f7ff ffea 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f001 fc01 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fdc7 	bl	8000438 <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008b8:	08002ce8 	.word	0x08002ce8
  ldr r2, =_sbss
 80008bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c0:	20000210 	.word	0x20000210

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f931 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fed2 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f93b 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000948:	f000 f911 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	200000c4 	.word	0x200000c4

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200000c4 	.word	0x200000c4

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	@ 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff47 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5c 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	e16b      	b.n	8000eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 815a 	bne.w	8000eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d130      	bne.n	8000c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0201 	and.w	r2, r3, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d017      	beq.n	8000cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d123      	bne.n	8000d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80b4 	beq.w	8000eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b60      	ldr	r3, [pc, #384]	@ (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	@ (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d62:	4a5b      	ldr	r2, [pc, #364]	@ (8000ed0 <HAL_GPIO_Init+0x310>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a52      	ldr	r2, [pc, #328]	@ (8000ed4 <HAL_GPIO_Init+0x314>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d02b      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a51      	ldr	r2, [pc, #324]	@ (8000ed8 <HAL_GPIO_Init+0x318>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d025      	beq.n	8000de2 <HAL_GPIO_Init+0x222>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a50      	ldr	r2, [pc, #320]	@ (8000edc <HAL_GPIO_Init+0x31c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01f      	beq.n	8000dde <HAL_GPIO_Init+0x21e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee0 <HAL_GPIO_Init+0x320>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x21a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	@ (8000ee4 <HAL_GPIO_Init+0x324>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x216>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee8 <HAL_GPIO_Init+0x328>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x212>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	@ (8000eec <HAL_GPIO_Init+0x32c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x20e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef0 <HAL_GPIO_Init+0x330>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x20a>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00e      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dca:	2308      	movs	r3, #8
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dce:	2306      	movs	r3, #6
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000de6:	2300      	movs	r3, #0
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df8:	4935      	ldr	r1, [pc, #212]	@ (8000ed0 <HAL_GPIO_Init+0x310>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a32      	ldr	r2, [pc, #200]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b30      	ldr	r3, [pc, #192]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e54:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea8:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f ae90 	bls.w	8000bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40013c00 	.word	0x40013c00

08000ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e001      	b.n	8000f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	619a      	str	r2, [r3, #24]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e267      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d075      	beq.n	8001066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d00c      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f86:	4b85      	ldr	r3, [pc, #532]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d112      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f92:	4b82      	ldr	r3, [pc, #520]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d05b      	beq.n	8001064 <HAL_RCC_OscConfig+0x108>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d157      	bne.n	8001064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e242      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc0:	d106      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x74>
 8000fc2:	4b76      	ldr	r3, [pc, #472]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a75      	ldr	r2, [pc, #468]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e01d      	b.n	800100c <HAL_RCC_OscConfig+0xb0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x98>
 8000fda:	4b70      	ldr	r3, [pc, #448]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6f      	ldr	r2, [pc, #444]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a6c      	ldr	r2, [pc, #432]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e00b      	b.n	800100c <HAL_RCC_OscConfig+0xb0>
 8000ff4:	4b69      	ldr	r3, [pc, #420]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a68      	ldr	r2, [pc, #416]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8000ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b66      	ldr	r3, [pc, #408]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a65      	ldr	r2, [pc, #404]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fcbe 	bl	8000994 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fcba 	bl	8000994 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	@ 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e207      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	4b5b      	ldr	r3, [pc, #364]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0xc0>
 800103a:	e014      	b.n	8001066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fcaa 	bl	8000994 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fca6 	bl	8000994 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	@ 0x64
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e1f3      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	4b51      	ldr	r3, [pc, #324]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0xe8>
 8001062:	e000      	b.n	8001066 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d063      	beq.n	800113a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001072:	4b4a      	ldr	r3, [pc, #296]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800107e:	4b47      	ldr	r3, [pc, #284]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001086:	2b08      	cmp	r3, #8
 8001088:	d11c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800108a:	4b44      	ldr	r3, [pc, #272]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d116      	bne.n	80010c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	4b41      	ldr	r3, [pc, #260]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_RCC_OscConfig+0x152>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d001      	beq.n	80010ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e1c7      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4937      	ldr	r1, [pc, #220]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	e03a      	b.n	800113a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d020      	beq.n	800110e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010cc:	4b34      	ldr	r3, [pc, #208]	@ (80011a0 <HAL_RCC_OscConfig+0x244>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fc5f 	bl	8000994 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fc5b 	bl	8000994 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e1a8      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b28      	ldr	r3, [pc, #160]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4925      	ldr	r1, [pc, #148]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001108:	4313      	orrs	r3, r2
 800110a:	600b      	str	r3, [r1, #0]
 800110c:	e015      	b.n	800113a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_RCC_OscConfig+0x244>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc3e 	bl	8000994 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fc3a 	bl	8000994 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e187      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d036      	beq.n	80011b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d016      	beq.n	800117c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_RCC_OscConfig+0x248>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001154:	f7ff fc1e 	bl	8000994 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fc1a 	bl	8000994 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e167      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_RCC_OscConfig+0x240>)
 8001170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x200>
 800117a:	e01b      	b.n	80011b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_RCC_OscConfig+0x248>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fc07 	bl	8000994 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001188:	e00e      	b.n	80011a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118a:	f7ff fc03 	bl	8000994 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d907      	bls.n	80011a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e150      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
 800119c:	40023800 	.word	0x40023800
 80011a0:	42470000 	.word	0x42470000
 80011a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	4b88      	ldr	r3, [pc, #544]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80011aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1ea      	bne.n	800118a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8097 	beq.w	80012f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b81      	ldr	r3, [pc, #516]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10f      	bne.n	80011f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b7d      	ldr	r3, [pc, #500]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a7c      	ldr	r2, [pc, #496]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e2:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ee:	2301      	movs	r3, #1
 80011f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b77      	ldr	r3, [pc, #476]	@ (80013d0 <HAL_RCC_OscConfig+0x474>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fe:	4b74      	ldr	r3, [pc, #464]	@ (80013d0 <HAL_RCC_OscConfig+0x474>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a73      	ldr	r2, [pc, #460]	@ (80013d0 <HAL_RCC_OscConfig+0x474>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120a:	f7ff fbc3 	bl	8000994 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001212:	f7ff fbbf 	bl	8000994 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e10c      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <HAL_RCC_OscConfig+0x474>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x2ea>
 8001238:	4b64      	ldr	r3, [pc, #400]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800123c:	4a63      	ldr	r2, [pc, #396]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6713      	str	r3, [r2, #112]	@ 0x70
 8001244:	e01c      	b.n	8001280 <HAL_RCC_OscConfig+0x324>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b05      	cmp	r3, #5
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x30c>
 800124e:	4b5f      	ldr	r3, [pc, #380]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001252:	4a5e      	ldr	r2, [pc, #376]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6713      	str	r3, [r2, #112]	@ 0x70
 800125a:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125e:	4a5b      	ldr	r2, [pc, #364]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6713      	str	r3, [r2, #112]	@ 0x70
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0x324>
 8001268:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126c:	4a57      	ldr	r2, [pc, #348]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	6713      	str	r3, [r2, #112]	@ 0x70
 8001274:	4b55      	ldr	r3, [pc, #340]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001278:	4a54      	ldr	r2, [pc, #336]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 800127a:	f023 0304 	bic.w	r3, r3, #4
 800127e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d015      	beq.n	80012b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fb84 	bl	8000994 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fb80 	bl	8000994 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e0cb      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0ee      	beq.n	8001290 <HAL_RCC_OscConfig+0x334>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fb6e 	bl	8000994 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fb6a 	bl	8000994 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e0b5      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d2:	4b3e      	ldr	r3, [pc, #248]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1ee      	bne.n	80012bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e4:	4b39      	ldr	r3, [pc, #228]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a38      	ldr	r2, [pc, #224]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80012ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80a1 	beq.w	800143c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012fa:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b08      	cmp	r3, #8
 8001304:	d05c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d141      	bne.n	8001392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <HAL_RCC_OscConfig+0x478>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb3e 	bl	8000994 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb3a 	bl	8000994 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e087      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132e:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	3b01      	subs	r3, #1
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	491b      	ldr	r1, [pc, #108]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_RCC_OscConfig+0x478>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fb13 	bl	8000994 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fb0f 	bl	8000994 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e05c      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x416>
 8001390:	e054      	b.n	800143c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_RCC_OscConfig+0x478>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fafc 	bl	8000994 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff faf8 	bl	8000994 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e045      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_RCC_OscConfig+0x470>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x444>
 80013be:	e03d      	b.n	800143c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d107      	bne.n	80013d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e038      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000
 80013d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_RCC_OscConfig+0x4ec>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d028      	beq.n	8001438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d121      	bne.n	8001438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d11a      	bne.n	8001438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001408:	4013      	ands	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800140e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001410:	4293      	cmp	r3, r2
 8001412:	d111      	bne.n	8001438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	3b01      	subs	r3, #1
 8001422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0cc      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b68      	ldr	r3, [pc, #416]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d90c      	bls.n	8001488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b65      	ldr	r3, [pc, #404]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b63      	ldr	r3, [pc, #396]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b8      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a0:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a58      	ldr	r2, [pc, #352]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a52      	ldr	r2, [pc, #328]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c4:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	494d      	ldr	r1, [pc, #308]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d044      	beq.n	800156c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d119      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e07f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d003      	beq.n	800150a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	2b03      	cmp	r3, #3
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e06f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e067      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4934      	ldr	r1, [pc, #208]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff fa2a 	bl	8000994 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff fa26 	bl	8000994 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e04f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d20c      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e032      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4916      	ldr	r1, [pc, #88]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490e      	ldr	r1, [pc, #56]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d2:	f000 f821 	bl	8001618 <HAL_RCC_GetSysClockFreq>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	490a      	ldr	r1, [pc, #40]	@ (800160c <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f98a 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	40023800 	.word	0x40023800
 800160c:	08002c8c 	.word	0x08002c8c
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800161c:	b090      	sub	sp, #64	@ 0x40
 800161e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001630:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x17c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d00d      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x40>
 800163c:	2b08      	cmp	r3, #8
 800163e:	f200 80a0 	bhi.w	8001782 <HAL_RCC_GetSysClockFreq+0x16a>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x34>
 8001646:	2b04      	cmp	r3, #4
 8001648:	d003      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x3a>
 800164a:	e09a      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x16a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b52      	ldr	r3, [pc, #328]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 800164e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001650:	e09a      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x170>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001652:	4b52      	ldr	r3, [pc, #328]	@ (800179c <HAL_RCC_GetSysClockFreq+0x184>)
 8001654:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001656:	e097      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x170>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4b4e      	ldr	r3, [pc, #312]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x17c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001662:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x17c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d027      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x17c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	2200      	movs	r2, #0
 8001676:	623b      	str	r3, [r7, #32]
 8001678:	627a      	str	r2, [r7, #36]	@ 0x24
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001680:	2100      	movs	r1, #0
 8001682:	4b46      	ldr	r3, [pc, #280]	@ (800179c <HAL_RCC_GetSysClockFreq+0x184>)
 8001684:	fb03 f201 	mul.w	r2, r3, r1
 8001688:	2300      	movs	r3, #0
 800168a:	fb00 f303 	mul.w	r3, r0, r3
 800168e:	4413      	add	r3, r2
 8001690:	4a42      	ldr	r2, [pc, #264]	@ (800179c <HAL_RCC_GetSysClockFreq+0x184>)
 8001692:	fba0 2102 	umull	r2, r1, r0, r2
 8001696:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001698:	62ba      	str	r2, [r7, #40]	@ 0x28
 800169a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800169c:	4413      	add	r3, r2
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a2:	2200      	movs	r2, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	61fa      	str	r2, [r7, #28]
 80016a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016b0:	f7fe fdc6 	bl	8000240 <__aeabi_uldivmod>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4613      	mov	r3, r2
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016bc:	e053      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x14e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x17c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	2200      	movs	r2, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	617a      	str	r2, [r7, #20]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016d0:	f04f 0b00 	mov.w	fp, #0
 80016d4:	4652      	mov	r2, sl
 80016d6:	465b      	mov	r3, fp
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	0159      	lsls	r1, r3, #5
 80016e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e6:	0150      	lsls	r0, r2, #5
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	ebb2 080a 	subs.w	r8, r2, sl
 80016f0:	eb63 090b 	sbc.w	r9, r3, fp
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001700:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001704:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001708:	ebb2 0408 	subs.w	r4, r2, r8
 800170c:	eb63 0509 	sbc.w	r5, r3, r9
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	00eb      	lsls	r3, r5, #3
 800171a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171e:	00e2      	lsls	r2, r4, #3
 8001720:	4614      	mov	r4, r2
 8001722:	461d      	mov	r5, r3
 8001724:	eb14 030a 	adds.w	r3, r4, sl
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	eb45 030b 	adc.w	r3, r5, fp
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 4500 	ldrd	r4, r5, [r7]
 800173c:	4629      	mov	r1, r5
 800173e:	028b      	lsls	r3, r1, #10
 8001740:	4621      	mov	r1, r4
 8001742:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001746:	4621      	mov	r1, r4
 8001748:	028a      	lsls	r2, r1, #10
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001750:	2200      	movs	r2, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	60fa      	str	r2, [r7, #12]
 8001756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175a:	f7fe fd71 	bl	8000240 <__aeabi_uldivmod>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4613      	mov	r3, r2
 8001764:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x17c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	3301      	adds	r3, #1
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001780:	e002      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x170>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x180>)
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800178a:	4618      	mov	r0, r3
 800178c:	3740      	adds	r7, #64	@ 0x40
 800178e:	46bd      	mov	sp, r7
 8001790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	00f42400 	.word	0x00f42400
 800179c:	017d7840 	.word	0x017d7840

080017a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017bc:	f7ff fff0 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017c0:	4602      	mov	r2, r0
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	0a9b      	lsrs	r3, r3, #10
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	4903      	ldr	r1, [pc, #12]	@ (80017dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ce:	5ccb      	ldrb	r3, [r1, r3]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	08002c9c 	.word	0x08002c9c

080017e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e4:	f7ff ffdc 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	0b5b      	lsrs	r3, r3, #13
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	4903      	ldr	r1, [pc, #12]	@ (8001804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	08002c9c 	.word	0x08002c9c

08001808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e042      	b.n	80018a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe ff60 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	@ 0x24
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800184a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f973 	bl	8001b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d175      	bne.n	80019b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_UART_Transmit+0x2c>
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e06e      	b.n	80019b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2221      	movs	r2, #33	@ 0x21
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018e6:	f7ff f855 	bl	8000994 <HAL_GetTick>
 80018ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	88fa      	ldrh	r2, [r7, #6]
 80018f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001900:	d108      	bne.n	8001914 <HAL_UART_Transmit+0x6c>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d104      	bne.n	8001914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	e003      	b.n	800191c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800191c:	e02e      	b.n	800197c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	2180      	movs	r1, #128	@ 0x80
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f848 	bl	80019be <UART_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e03a      	b.n	80019b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10b      	bne.n	800195e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	e007      	b.n	800196e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3301      	adds	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1cb      	bne.n	800191e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2200      	movs	r2, #0
 800198e:	2140      	movs	r1, #64	@ 0x40
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f814 	bl	80019be <UART_WaitOnFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e006      	b.n	80019b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019ce:	e03b      	b.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019d6:	d037      	beq.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d8:	f7fe ffdc 	bl	8000994 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <UART_WaitOnFlagUntilTimeout+0x30>
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e03a      	b.n	8001a68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b80      	cmp	r3, #128	@ 0x80
 8001a04:	d020      	beq.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b40      	cmp	r3, #64	@ 0x40
 8001a0a:	d01d      	beq.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d116      	bne.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f81d 	bl	8001a70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e00f      	b.n	8001a68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d0b4      	beq.n	80019d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b095      	sub	sp, #84	@ 0x54
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a82:	e853 3f00 	ldrex	r3, [r3]
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	330c      	adds	r3, #12
 8001a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a98:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001aa0:	e841 2300 	strex	r3, r2, [r1]
 8001aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e5      	bne.n	8001a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3314      	adds	r3, #20
 8001ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	e853 3f00 	ldrex	r3, [r3]
 8001aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3314      	adds	r3, #20
 8001aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad4:	e841 2300 	strex	r3, r2, [r1]
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1e5      	bne.n	8001aac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d119      	bne.n	8001b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	330c      	adds	r3, #12
 8001aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	e853 3f00 	ldrex	r3, [r3]
 8001af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f023 0310 	bic.w	r3, r3, #16
 8001afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	330c      	adds	r3, #12
 8001b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b08:	61ba      	str	r2, [r7, #24]
 8001b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	e841 2300 	strex	r3, r2, [r1]
 8001b14:	613b      	str	r3, [r7, #16]
   return(result);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1e5      	bne.n	8001ae8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b2a:	bf00      	nop
 8001b2c:	3754      	adds	r7, #84	@ 0x54
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b3c:	b0c0      	sub	sp, #256	@ 0x100
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	ea40 0301 	orr.w	r3, r0, r1
 8001b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b90:	f021 010c 	bic.w	r1, r1, #12
 8001b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb2:	6999      	ldr	r1, [r3, #24]
 8001bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	ea40 0301 	orr.w	r3, r0, r1
 8001bbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b8f      	ldr	r3, [pc, #572]	@ (8001e04 <UART_SetConfig+0x2cc>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d005      	beq.n	8001bd8 <UART_SetConfig+0xa0>
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8001e08 <UART_SetConfig+0x2d0>)
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d104      	bne.n	8001be2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bd8:	f7ff fe02 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001bdc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001be0:	e003      	b.n	8001bea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001be2:	f7ff fde9 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001be6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bf4:	f040 810c 	bne.w	8001e10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	1891      	adds	r1, r2, r2
 8001c10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c12:	415b      	adcs	r3, r3
 8001c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	eb12 0801 	adds.w	r8, r2, r1
 8001c20:	4629      	mov	r1, r5
 8001c22:	eb43 0901 	adc.w	r9, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb18 0303 	adds.w	r3, r8, r3
 8001c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c48:	462b      	mov	r3, r5
 8001c4a:	eb49 0303 	adc.w	r3, r9, r3
 8001c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c66:	460b      	mov	r3, r1
 8001c68:	18db      	adds	r3, r3, r3
 8001c6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	eb42 0303 	adc.w	r3, r2, r3
 8001c72:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c7c:	f7fe fae0 	bl	8000240 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4b61      	ldr	r3, [pc, #388]	@ (8001e0c <UART_SetConfig+0x2d4>)
 8001c86:	fba3 2302 	umull	r2, r3, r3, r2
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	011c      	lsls	r4, r3, #4
 8001c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	1891      	adds	r1, r2, r2
 8001ca6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ca8:	415b      	adcs	r3, r3
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	eb12 0a01 	adds.w	sl, r2, r1
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	eb43 0b01 	adc.w	fp, r3, r1
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cd0:	4692      	mov	sl, r2
 8001cd2:	469b      	mov	fp, r3
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	eb1a 0303 	adds.w	r3, sl, r3
 8001cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001cde:	464b      	mov	r3, r9
 8001ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	18db      	adds	r3, r3, r3
 8001d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d02:	4613      	mov	r3, r2
 8001d04:	eb42 0303 	adc.w	r3, r2, r3
 8001d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d12:	f7fe fa95 	bl	8000240 <__aeabi_uldivmod>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <UART_SetConfig+0x2d4>)
 8001d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2264      	movs	r2, #100	@ 0x64
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	1acb      	subs	r3, r1, r3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d32:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <UART_SetConfig+0x2d4>)
 8001d34:	fba3 2302 	umull	r2, r3, r3, r2
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d40:	441c      	add	r4, r3
 8001d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d54:	4642      	mov	r2, r8
 8001d56:	464b      	mov	r3, r9
 8001d58:	1891      	adds	r1, r2, r2
 8001d5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d5c:	415b      	adcs	r3, r3
 8001d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d64:	4641      	mov	r1, r8
 8001d66:	1851      	adds	r1, r2, r1
 8001d68:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d6a:	4649      	mov	r1, r9
 8001d6c:	414b      	adcs	r3, r1
 8001d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d7c:	4659      	mov	r1, fp
 8001d7e:	00cb      	lsls	r3, r1, #3
 8001d80:	4651      	mov	r1, sl
 8001d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d86:	4651      	mov	r1, sl
 8001d88:	00ca      	lsls	r2, r1, #3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4642      	mov	r2, r8
 8001d92:	189b      	adds	r3, r3, r2
 8001d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d98:	464b      	mov	r3, r9
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	eb42 0303 	adc.w	r3, r2, r3
 8001da0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001db0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001db4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001db8:	460b      	mov	r3, r1
 8001dba:	18db      	adds	r3, r3, r3
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	eb42 0303 	adc.w	r3, r2, r3
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001dce:	f7fe fa37 	bl	8000240 <__aeabi_uldivmod>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <UART_SetConfig+0x2d4>)
 8001dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	2164      	movs	r1, #100	@ 0x64
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	3332      	adds	r3, #50	@ 0x32
 8001dea:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <UART_SetConfig+0x2d4>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4422      	add	r2, r4
 8001dfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e00:	e106      	b.n	8002010 <UART_SetConfig+0x4d8>
 8001e02:	bf00      	nop
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40011400 	.word	0x40011400
 8001e0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e22:	4642      	mov	r2, r8
 8001e24:	464b      	mov	r3, r9
 8001e26:	1891      	adds	r1, r2, r2
 8001e28:	6239      	str	r1, [r7, #32]
 8001e2a:	415b      	adcs	r3, r3
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e32:	4641      	mov	r1, r8
 8001e34:	1854      	adds	r4, r2, r1
 8001e36:	4649      	mov	r1, r9
 8001e38:	eb43 0501 	adc.w	r5, r3, r1
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	00eb      	lsls	r3, r5, #3
 8001e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e4a:	00e2      	lsls	r2, r4, #3
 8001e4c:	4614      	mov	r4, r2
 8001e4e:	461d      	mov	r5, r3
 8001e50:	4643      	mov	r3, r8
 8001e52:	18e3      	adds	r3, r4, r3
 8001e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e58:	464b      	mov	r3, r9
 8001e5a:	eb45 0303 	adc.w	r3, r5, r3
 8001e5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e7e:	4629      	mov	r1, r5
 8001e80:	008b      	lsls	r3, r1, #2
 8001e82:	4621      	mov	r1, r4
 8001e84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e88:	4621      	mov	r1, r4
 8001e8a:	008a      	lsls	r2, r1, #2
 8001e8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e90:	f7fe f9d6 	bl	8000240 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4b60      	ldr	r3, [pc, #384]	@ (800201c <UART_SetConfig+0x4e4>)
 8001e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	011c      	lsls	r4, r3, #4
 8001ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001eac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001eb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	1891      	adds	r1, r2, r2
 8001eba:	61b9      	str	r1, [r7, #24]
 8001ebc:	415b      	adcs	r3, r3
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	1851      	adds	r1, r2, r1
 8001ec8:	6139      	str	r1, [r7, #16]
 8001eca:	4649      	mov	r1, r9
 8001ecc:	414b      	adcs	r3, r1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001edc:	4659      	mov	r1, fp
 8001ede:	00cb      	lsls	r3, r1, #3
 8001ee0:	4651      	mov	r1, sl
 8001ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	00ca      	lsls	r2, r1, #3
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	189b      	adds	r3, r3, r2
 8001ef4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ef8:	464b      	mov	r3, r9
 8001efa:	460a      	mov	r2, r1
 8001efc:	eb42 0303 	adc.w	r3, r2, r3
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	008b      	lsls	r3, r1, #2
 8001f20:	4641      	mov	r1, r8
 8001f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f26:	4641      	mov	r1, r8
 8001f28:	008a      	lsls	r2, r1, #2
 8001f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f2e:	f7fe f987 	bl	8000240 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	4b38      	ldr	r3, [pc, #224]	@ (800201c <UART_SetConfig+0x4e4>)
 8001f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2264      	movs	r2, #100	@ 0x64
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	1acb      	subs	r3, r1, r3
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	3332      	adds	r3, #50	@ 0x32
 8001f4c:	4a33      	ldr	r2, [pc, #204]	@ (800201c <UART_SetConfig+0x4e4>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f58:	441c      	add	r4, r3
 8001f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f5e:	2200      	movs	r2, #0
 8001f60:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f62:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f68:	4642      	mov	r2, r8
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	1891      	adds	r1, r2, r2
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	415b      	adcs	r3, r3
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f78:	4641      	mov	r1, r8
 8001f7a:	1851      	adds	r1, r2, r1
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	4649      	mov	r1, r9
 8001f80:	414b      	adcs	r3, r1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f90:	4659      	mov	r1, fp
 8001f92:	00cb      	lsls	r3, r1, #3
 8001f94:	4651      	mov	r1, sl
 8001f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f9a:	4651      	mov	r1, sl
 8001f9c:	00ca      	lsls	r2, r1, #3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4642      	mov	r2, r8
 8001fa6:	189b      	adds	r3, r3, r2
 8001fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001faa:	464b      	mov	r3, r9
 8001fac:	460a      	mov	r2, r1
 8001fae:	eb42 0303 	adc.w	r3, r2, r3
 8001fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fbe:	667a      	str	r2, [r7, #100]	@ 0x64
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001fcc:	4649      	mov	r1, r9
 8001fce:	008b      	lsls	r3, r1, #2
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fd6:	4641      	mov	r1, r8
 8001fd8:	008a      	lsls	r2, r1, #2
 8001fda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fde:	f7fe f92f 	bl	8000240 <__aeabi_uldivmod>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <UART_SetConfig+0x4e4>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	2164      	movs	r1, #100	@ 0x64
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	3332      	adds	r3, #50	@ 0x32
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <UART_SetConfig+0x4e4>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4422      	add	r2, r4
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	bf00      	nop
 8002012:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201c:	51eb851f 	.word	0x51eb851f

08002020 <sniprintf>:
 8002020:	b40c      	push	{r2, r3}
 8002022:	b530      	push	{r4, r5, lr}
 8002024:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <sniprintf+0x68>)
 8002026:	1e0c      	subs	r4, r1, #0
 8002028:	681d      	ldr	r5, [r3, #0]
 800202a:	b09d      	sub	sp, #116	@ 0x74
 800202c:	da08      	bge.n	8002040 <sniprintf+0x20>
 800202e:	238b      	movs	r3, #139	@ 0x8b
 8002030:	602b      	str	r3, [r5, #0]
 8002032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002036:	b01d      	add	sp, #116	@ 0x74
 8002038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800203c:	b002      	add	sp, #8
 800203e:	4770      	bx	lr
 8002040:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002044:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800204e:	bf14      	ite	ne
 8002050:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002054:	4623      	moveq	r3, r4
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	9307      	str	r3, [sp, #28]
 800205a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800205e:	9002      	str	r0, [sp, #8]
 8002060:	9006      	str	r0, [sp, #24]
 8002062:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002066:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002068:	ab21      	add	r3, sp, #132	@ 0x84
 800206a:	a902      	add	r1, sp, #8
 800206c:	4628      	mov	r0, r5
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	f000 f998 	bl	80023a4 <_svfiprintf_r>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	bfbc      	itt	lt
 8002078:	238b      	movlt	r3, #139	@ 0x8b
 800207a:	602b      	strlt	r3, [r5, #0]
 800207c:	2c00      	cmp	r4, #0
 800207e:	d0da      	beq.n	8002036 <sniprintf+0x16>
 8002080:	9b02      	ldr	r3, [sp, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e7d6      	b.n	8002036 <sniprintf+0x16>
 8002088:	2000000c 	.word	0x2000000c

0800208c <memset>:
 800208c:	4402      	add	r2, r0
 800208e:	4603      	mov	r3, r0
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <memset+0xa>
 8002094:	4770      	bx	lr
 8002096:	f803 1b01 	strb.w	r1, [r3], #1
 800209a:	e7f9      	b.n	8002090 <memset+0x4>

0800209c <__errno>:
 800209c:	4b01      	ldr	r3, [pc, #4]	@ (80020a4 <__errno+0x8>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2000000c 	.word	0x2000000c

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <__libc_init_array+0x38>)
 80020ac:	4d0d      	ldr	r5, [pc, #52]	@ (80020e4 <__libc_init_array+0x3c>)
 80020ae:	1b5b      	subs	r3, r3, r5
 80020b0:	109c      	asrs	r4, r3, #2
 80020b2:	2600      	movs	r6, #0
 80020b4:	42a6      	cmp	r6, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	f000 fdca 	bl	8002c50 <_init>
 80020bc:	4d0a      	ldr	r5, [pc, #40]	@ (80020e8 <__libc_init_array+0x40>)
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <__libc_init_array+0x44>)
 80020c0:	1b5b      	subs	r3, r3, r5
 80020c2:	109c      	asrs	r4, r3, #2
 80020c4:	2600      	movs	r6, #0
 80020c6:	42a6      	cmp	r6, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d0:	4798      	blx	r3
 80020d2:	3601      	adds	r6, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020da:	4798      	blx	r3
 80020dc:	3601      	adds	r6, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	08002ce0 	.word	0x08002ce0
 80020e4:	08002ce0 	.word	0x08002ce0
 80020e8:	08002ce0 	.word	0x08002ce0
 80020ec:	08002ce4 	.word	0x08002ce4

080020f0 <__retarget_lock_acquire_recursive>:
 80020f0:	4770      	bx	lr

080020f2 <__retarget_lock_release_recursive>:
 80020f2:	4770      	bx	lr

080020f4 <_free_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4605      	mov	r5, r0
 80020f8:	2900      	cmp	r1, #0
 80020fa:	d041      	beq.n	8002180 <_free_r+0x8c>
 80020fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002100:	1f0c      	subs	r4, r1, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	bfb8      	it	lt
 8002106:	18e4      	addlt	r4, r4, r3
 8002108:	f000 f8e0 	bl	80022cc <__malloc_lock>
 800210c:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <_free_r+0x90>)
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	b933      	cbnz	r3, 8002120 <_free_r+0x2c>
 8002112:	6063      	str	r3, [r4, #4]
 8002114:	6014      	str	r4, [r2, #0]
 8002116:	4628      	mov	r0, r5
 8002118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800211c:	f000 b8dc 	b.w	80022d8 <__malloc_unlock>
 8002120:	42a3      	cmp	r3, r4
 8002122:	d908      	bls.n	8002136 <_free_r+0x42>
 8002124:	6820      	ldr	r0, [r4, #0]
 8002126:	1821      	adds	r1, r4, r0
 8002128:	428b      	cmp	r3, r1
 800212a:	bf01      	itttt	eq
 800212c:	6819      	ldreq	r1, [r3, #0]
 800212e:	685b      	ldreq	r3, [r3, #4]
 8002130:	1809      	addeq	r1, r1, r0
 8002132:	6021      	streq	r1, [r4, #0]
 8002134:	e7ed      	b.n	8002112 <_free_r+0x1e>
 8002136:	461a      	mov	r2, r3
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b10b      	cbz	r3, 8002140 <_free_r+0x4c>
 800213c:	42a3      	cmp	r3, r4
 800213e:	d9fa      	bls.n	8002136 <_free_r+0x42>
 8002140:	6811      	ldr	r1, [r2, #0]
 8002142:	1850      	adds	r0, r2, r1
 8002144:	42a0      	cmp	r0, r4
 8002146:	d10b      	bne.n	8002160 <_free_r+0x6c>
 8002148:	6820      	ldr	r0, [r4, #0]
 800214a:	4401      	add	r1, r0
 800214c:	1850      	adds	r0, r2, r1
 800214e:	4283      	cmp	r3, r0
 8002150:	6011      	str	r1, [r2, #0]
 8002152:	d1e0      	bne.n	8002116 <_free_r+0x22>
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	6053      	str	r3, [r2, #4]
 800215a:	4408      	add	r0, r1
 800215c:	6010      	str	r0, [r2, #0]
 800215e:	e7da      	b.n	8002116 <_free_r+0x22>
 8002160:	d902      	bls.n	8002168 <_free_r+0x74>
 8002162:	230c      	movs	r3, #12
 8002164:	602b      	str	r3, [r5, #0]
 8002166:	e7d6      	b.n	8002116 <_free_r+0x22>
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	1821      	adds	r1, r4, r0
 800216c:	428b      	cmp	r3, r1
 800216e:	bf04      	itt	eq
 8002170:	6819      	ldreq	r1, [r3, #0]
 8002172:	685b      	ldreq	r3, [r3, #4]
 8002174:	6063      	str	r3, [r4, #4]
 8002176:	bf04      	itt	eq
 8002178:	1809      	addeq	r1, r1, r0
 800217a:	6021      	streq	r1, [r4, #0]
 800217c:	6054      	str	r4, [r2, #4]
 800217e:	e7ca      	b.n	8002116 <_free_r+0x22>
 8002180:	bd38      	pop	{r3, r4, r5, pc}
 8002182:	bf00      	nop
 8002184:	2000020c 	.word	0x2000020c

08002188 <sbrk_aligned>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4e0f      	ldr	r6, [pc, #60]	@ (80021c8 <sbrk_aligned+0x40>)
 800218c:	460c      	mov	r4, r1
 800218e:	6831      	ldr	r1, [r6, #0]
 8002190:	4605      	mov	r5, r0
 8002192:	b911      	cbnz	r1, 800219a <sbrk_aligned+0x12>
 8002194:	f000 fbaa 	bl	80028ec <_sbrk_r>
 8002198:	6030      	str	r0, [r6, #0]
 800219a:	4621      	mov	r1, r4
 800219c:	4628      	mov	r0, r5
 800219e:	f000 fba5 	bl	80028ec <_sbrk_r>
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	d103      	bne.n	80021ae <sbrk_aligned+0x26>
 80021a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80021aa:	4620      	mov	r0, r4
 80021ac:	bd70      	pop	{r4, r5, r6, pc}
 80021ae:	1cc4      	adds	r4, r0, #3
 80021b0:	f024 0403 	bic.w	r4, r4, #3
 80021b4:	42a0      	cmp	r0, r4
 80021b6:	d0f8      	beq.n	80021aa <sbrk_aligned+0x22>
 80021b8:	1a21      	subs	r1, r4, r0
 80021ba:	4628      	mov	r0, r5
 80021bc:	f000 fb96 	bl	80028ec <_sbrk_r>
 80021c0:	3001      	adds	r0, #1
 80021c2:	d1f2      	bne.n	80021aa <sbrk_aligned+0x22>
 80021c4:	e7ef      	b.n	80021a6 <sbrk_aligned+0x1e>
 80021c6:	bf00      	nop
 80021c8:	20000208 	.word	0x20000208

080021cc <_malloc_r>:
 80021cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021d0:	1ccd      	adds	r5, r1, #3
 80021d2:	f025 0503 	bic.w	r5, r5, #3
 80021d6:	3508      	adds	r5, #8
 80021d8:	2d0c      	cmp	r5, #12
 80021da:	bf38      	it	cc
 80021dc:	250c      	movcc	r5, #12
 80021de:	2d00      	cmp	r5, #0
 80021e0:	4606      	mov	r6, r0
 80021e2:	db01      	blt.n	80021e8 <_malloc_r+0x1c>
 80021e4:	42a9      	cmp	r1, r5
 80021e6:	d904      	bls.n	80021f2 <_malloc_r+0x26>
 80021e8:	230c      	movs	r3, #12
 80021ea:	6033      	str	r3, [r6, #0]
 80021ec:	2000      	movs	r0, #0
 80021ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80022c8 <_malloc_r+0xfc>
 80021f6:	f000 f869 	bl	80022cc <__malloc_lock>
 80021fa:	f8d8 3000 	ldr.w	r3, [r8]
 80021fe:	461c      	mov	r4, r3
 8002200:	bb44      	cbnz	r4, 8002254 <_malloc_r+0x88>
 8002202:	4629      	mov	r1, r5
 8002204:	4630      	mov	r0, r6
 8002206:	f7ff ffbf 	bl	8002188 <sbrk_aligned>
 800220a:	1c43      	adds	r3, r0, #1
 800220c:	4604      	mov	r4, r0
 800220e:	d158      	bne.n	80022c2 <_malloc_r+0xf6>
 8002210:	f8d8 4000 	ldr.w	r4, [r8]
 8002214:	4627      	mov	r7, r4
 8002216:	2f00      	cmp	r7, #0
 8002218:	d143      	bne.n	80022a2 <_malloc_r+0xd6>
 800221a:	2c00      	cmp	r4, #0
 800221c:	d04b      	beq.n	80022b6 <_malloc_r+0xea>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	4639      	mov	r1, r7
 8002222:	4630      	mov	r0, r6
 8002224:	eb04 0903 	add.w	r9, r4, r3
 8002228:	f000 fb60 	bl	80028ec <_sbrk_r>
 800222c:	4581      	cmp	r9, r0
 800222e:	d142      	bne.n	80022b6 <_malloc_r+0xea>
 8002230:	6821      	ldr	r1, [r4, #0]
 8002232:	1a6d      	subs	r5, r5, r1
 8002234:	4629      	mov	r1, r5
 8002236:	4630      	mov	r0, r6
 8002238:	f7ff ffa6 	bl	8002188 <sbrk_aligned>
 800223c:	3001      	adds	r0, #1
 800223e:	d03a      	beq.n	80022b6 <_malloc_r+0xea>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	442b      	add	r3, r5
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	f8d8 3000 	ldr.w	r3, [r8]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	bb62      	cbnz	r2, 80022a8 <_malloc_r+0xdc>
 800224e:	f8c8 7000 	str.w	r7, [r8]
 8002252:	e00f      	b.n	8002274 <_malloc_r+0xa8>
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	1b52      	subs	r2, r2, r5
 8002258:	d420      	bmi.n	800229c <_malloc_r+0xd0>
 800225a:	2a0b      	cmp	r2, #11
 800225c:	d917      	bls.n	800228e <_malloc_r+0xc2>
 800225e:	1961      	adds	r1, r4, r5
 8002260:	42a3      	cmp	r3, r4
 8002262:	6025      	str	r5, [r4, #0]
 8002264:	bf18      	it	ne
 8002266:	6059      	strne	r1, [r3, #4]
 8002268:	6863      	ldr	r3, [r4, #4]
 800226a:	bf08      	it	eq
 800226c:	f8c8 1000 	streq.w	r1, [r8]
 8002270:	5162      	str	r2, [r4, r5]
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	4630      	mov	r0, r6
 8002276:	f000 f82f 	bl	80022d8 <__malloc_unlock>
 800227a:	f104 000b 	add.w	r0, r4, #11
 800227e:	1d23      	adds	r3, r4, #4
 8002280:	f020 0007 	bic.w	r0, r0, #7
 8002284:	1ac2      	subs	r2, r0, r3
 8002286:	bf1c      	itt	ne
 8002288:	1a1b      	subne	r3, r3, r0
 800228a:	50a3      	strne	r3, [r4, r2]
 800228c:	e7af      	b.n	80021ee <_malloc_r+0x22>
 800228e:	6862      	ldr	r2, [r4, #4]
 8002290:	42a3      	cmp	r3, r4
 8002292:	bf0c      	ite	eq
 8002294:	f8c8 2000 	streq.w	r2, [r8]
 8002298:	605a      	strne	r2, [r3, #4]
 800229a:	e7eb      	b.n	8002274 <_malloc_r+0xa8>
 800229c:	4623      	mov	r3, r4
 800229e:	6864      	ldr	r4, [r4, #4]
 80022a0:	e7ae      	b.n	8002200 <_malloc_r+0x34>
 80022a2:	463c      	mov	r4, r7
 80022a4:	687f      	ldr	r7, [r7, #4]
 80022a6:	e7b6      	b.n	8002216 <_malloc_r+0x4a>
 80022a8:	461a      	mov	r2, r3
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	42a3      	cmp	r3, r4
 80022ae:	d1fb      	bne.n	80022a8 <_malloc_r+0xdc>
 80022b0:	2300      	movs	r3, #0
 80022b2:	6053      	str	r3, [r2, #4]
 80022b4:	e7de      	b.n	8002274 <_malloc_r+0xa8>
 80022b6:	230c      	movs	r3, #12
 80022b8:	6033      	str	r3, [r6, #0]
 80022ba:	4630      	mov	r0, r6
 80022bc:	f000 f80c 	bl	80022d8 <__malloc_unlock>
 80022c0:	e794      	b.n	80021ec <_malloc_r+0x20>
 80022c2:	6005      	str	r5, [r0, #0]
 80022c4:	e7d6      	b.n	8002274 <_malloc_r+0xa8>
 80022c6:	bf00      	nop
 80022c8:	2000020c 	.word	0x2000020c

080022cc <__malloc_lock>:
 80022cc:	4801      	ldr	r0, [pc, #4]	@ (80022d4 <__malloc_lock+0x8>)
 80022ce:	f7ff bf0f 	b.w	80020f0 <__retarget_lock_acquire_recursive>
 80022d2:	bf00      	nop
 80022d4:	20000204 	.word	0x20000204

080022d8 <__malloc_unlock>:
 80022d8:	4801      	ldr	r0, [pc, #4]	@ (80022e0 <__malloc_unlock+0x8>)
 80022da:	f7ff bf0a 	b.w	80020f2 <__retarget_lock_release_recursive>
 80022de:	bf00      	nop
 80022e0:	20000204 	.word	0x20000204

080022e4 <__ssputs_r>:
 80022e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e8:	688e      	ldr	r6, [r1, #8]
 80022ea:	461f      	mov	r7, r3
 80022ec:	42be      	cmp	r6, r7
 80022ee:	4682      	mov	sl, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	4690      	mov	r8, r2
 80022f4:	4633      	mov	r3, r6
 80022f6:	d853      	bhi.n	80023a0 <__ssputs_r+0xbc>
 80022f8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80022fc:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8002300:	d02b      	beq.n	800235a <__ssputs_r+0x76>
 8002302:	6965      	ldr	r5, [r4, #20]
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	6909      	ldr	r1, [r1, #16]
 8002308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800230c:	eba3 0901 	sub.w	r9, r3, r1
 8002310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002314:	1c7b      	adds	r3, r7, #1
 8002316:	106d      	asrs	r5, r5, #1
 8002318:	444b      	add	r3, r9
 800231a:	42ab      	cmp	r3, r5
 800231c:	462a      	mov	r2, r5
 800231e:	bf84      	itt	hi
 8002320:	461d      	movhi	r5, r3
 8002322:	462a      	movhi	r2, r5
 8002324:	0543      	lsls	r3, r0, #21
 8002326:	d527      	bpl.n	8002378 <__ssputs_r+0x94>
 8002328:	4611      	mov	r1, r2
 800232a:	4650      	mov	r0, sl
 800232c:	f7ff ff4e 	bl	80021cc <_malloc_r>
 8002330:	4606      	mov	r6, r0
 8002332:	b358      	cbz	r0, 800238c <__ssputs_r+0xa8>
 8002334:	6921      	ldr	r1, [r4, #16]
 8002336:	464a      	mov	r2, r9
 8002338:	f000 fae8 	bl	800290c <memcpy>
 800233c:	89a3      	ldrh	r3, [r4, #12]
 800233e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002346:	81a3      	strh	r3, [r4, #12]
 8002348:	6126      	str	r6, [r4, #16]
 800234a:	6165      	str	r5, [r4, #20]
 800234c:	444e      	add	r6, r9
 800234e:	eba5 0509 	sub.w	r5, r5, r9
 8002352:	6026      	str	r6, [r4, #0]
 8002354:	60a5      	str	r5, [r4, #8]
 8002356:	463e      	mov	r6, r7
 8002358:	463b      	mov	r3, r7
 800235a:	461f      	mov	r7, r3
 800235c:	6820      	ldr	r0, [r4, #0]
 800235e:	463a      	mov	r2, r7
 8002360:	4641      	mov	r1, r8
 8002362:	f000 faa9 	bl	80028b8 <memmove>
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	1b9b      	subs	r3, r3, r6
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	443b      	add	r3, r7
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	2000      	movs	r0, #0
 8002374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002378:	4650      	mov	r0, sl
 800237a:	f000 fad5 	bl	8002928 <_realloc_r>
 800237e:	4606      	mov	r6, r0
 8002380:	2800      	cmp	r0, #0
 8002382:	d1e1      	bne.n	8002348 <__ssputs_r+0x64>
 8002384:	6921      	ldr	r1, [r4, #16]
 8002386:	4650      	mov	r0, sl
 8002388:	f7ff feb4 	bl	80020f4 <_free_r>
 800238c:	230c      	movs	r3, #12
 800238e:	f8ca 3000 	str.w	r3, [sl]
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800239e:	e7e9      	b.n	8002374 <__ssputs_r+0x90>
 80023a0:	463e      	mov	r6, r7
 80023a2:	e7db      	b.n	800235c <__ssputs_r+0x78>

080023a4 <_svfiprintf_r>:
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a8:	4698      	mov	r8, r3
 80023aa:	898b      	ldrh	r3, [r1, #12]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	b09d      	sub	sp, #116	@ 0x74
 80023b0:	4607      	mov	r7, r0
 80023b2:	460d      	mov	r5, r1
 80023b4:	4614      	mov	r4, r2
 80023b6:	d510      	bpl.n	80023da <_svfiprintf_r+0x36>
 80023b8:	690b      	ldr	r3, [r1, #16]
 80023ba:	b973      	cbnz	r3, 80023da <_svfiprintf_r+0x36>
 80023bc:	2140      	movs	r1, #64	@ 0x40
 80023be:	f7ff ff05 	bl	80021cc <_malloc_r>
 80023c2:	6028      	str	r0, [r5, #0]
 80023c4:	6128      	str	r0, [r5, #16]
 80023c6:	b930      	cbnz	r0, 80023d6 <_svfiprintf_r+0x32>
 80023c8:	230c      	movs	r3, #12
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023d0:	b01d      	add	sp, #116	@ 0x74
 80023d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d6:	2340      	movs	r3, #64	@ 0x40
 80023d8:	616b      	str	r3, [r5, #20]
 80023da:	2300      	movs	r3, #0
 80023dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80023de:	2320      	movs	r3, #32
 80023e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80023e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80023e8:	2330      	movs	r3, #48	@ 0x30
 80023ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002588 <_svfiprintf_r+0x1e4>
 80023ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023f2:	f04f 0901 	mov.w	r9, #1
 80023f6:	4623      	mov	r3, r4
 80023f8:	469a      	mov	sl, r3
 80023fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023fe:	b10a      	cbz	r2, 8002404 <_svfiprintf_r+0x60>
 8002400:	2a25      	cmp	r2, #37	@ 0x25
 8002402:	d1f9      	bne.n	80023f8 <_svfiprintf_r+0x54>
 8002404:	ebba 0b04 	subs.w	fp, sl, r4
 8002408:	d00b      	beq.n	8002422 <_svfiprintf_r+0x7e>
 800240a:	465b      	mov	r3, fp
 800240c:	4622      	mov	r2, r4
 800240e:	4629      	mov	r1, r5
 8002410:	4638      	mov	r0, r7
 8002412:	f7ff ff67 	bl	80022e4 <__ssputs_r>
 8002416:	3001      	adds	r0, #1
 8002418:	f000 80a7 	beq.w	800256a <_svfiprintf_r+0x1c6>
 800241c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800241e:	445a      	add	r2, fp
 8002420:	9209      	str	r2, [sp, #36]	@ 0x24
 8002422:	f89a 3000 	ldrb.w	r3, [sl]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 809f 	beq.w	800256a <_svfiprintf_r+0x1c6>
 800242c:	2300      	movs	r3, #0
 800242e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002436:	f10a 0a01 	add.w	sl, sl, #1
 800243a:	9304      	str	r3, [sp, #16]
 800243c:	9307      	str	r3, [sp, #28]
 800243e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002442:	931a      	str	r3, [sp, #104]	@ 0x68
 8002444:	4654      	mov	r4, sl
 8002446:	2205      	movs	r2, #5
 8002448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800244c:	484e      	ldr	r0, [pc, #312]	@ (8002588 <_svfiprintf_r+0x1e4>)
 800244e:	f7fd fea7 	bl	80001a0 <memchr>
 8002452:	9a04      	ldr	r2, [sp, #16]
 8002454:	b9d8      	cbnz	r0, 800248e <_svfiprintf_r+0xea>
 8002456:	06d0      	lsls	r0, r2, #27
 8002458:	bf44      	itt	mi
 800245a:	2320      	movmi	r3, #32
 800245c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002460:	0711      	lsls	r1, r2, #28
 8002462:	bf44      	itt	mi
 8002464:	232b      	movmi	r3, #43	@ 0x2b
 8002466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800246a:	f89a 3000 	ldrb.w	r3, [sl]
 800246e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002470:	d015      	beq.n	800249e <_svfiprintf_r+0xfa>
 8002472:	9a07      	ldr	r2, [sp, #28]
 8002474:	4654      	mov	r4, sl
 8002476:	2000      	movs	r0, #0
 8002478:	f04f 0c0a 	mov.w	ip, #10
 800247c:	4621      	mov	r1, r4
 800247e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002482:	3b30      	subs	r3, #48	@ 0x30
 8002484:	2b09      	cmp	r3, #9
 8002486:	d94b      	bls.n	8002520 <_svfiprintf_r+0x17c>
 8002488:	b1b0      	cbz	r0, 80024b8 <_svfiprintf_r+0x114>
 800248a:	9207      	str	r2, [sp, #28]
 800248c:	e014      	b.n	80024b8 <_svfiprintf_r+0x114>
 800248e:	eba0 0308 	sub.w	r3, r0, r8
 8002492:	fa09 f303 	lsl.w	r3, r9, r3
 8002496:	4313      	orrs	r3, r2
 8002498:	9304      	str	r3, [sp, #16]
 800249a:	46a2      	mov	sl, r4
 800249c:	e7d2      	b.n	8002444 <_svfiprintf_r+0xa0>
 800249e:	9b03      	ldr	r3, [sp, #12]
 80024a0:	1d19      	adds	r1, r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	9103      	str	r1, [sp, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bfbb      	ittet	lt
 80024aa:	425b      	neglt	r3, r3
 80024ac:	f042 0202 	orrlt.w	r2, r2, #2
 80024b0:	9307      	strge	r3, [sp, #28]
 80024b2:	9307      	strlt	r3, [sp, #28]
 80024b4:	bfb8      	it	lt
 80024b6:	9204      	strlt	r2, [sp, #16]
 80024b8:	7823      	ldrb	r3, [r4, #0]
 80024ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80024bc:	d10a      	bne.n	80024d4 <_svfiprintf_r+0x130>
 80024be:	7863      	ldrb	r3, [r4, #1]
 80024c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80024c2:	d132      	bne.n	800252a <_svfiprintf_r+0x186>
 80024c4:	9b03      	ldr	r3, [sp, #12]
 80024c6:	1d1a      	adds	r2, r3, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	9203      	str	r2, [sp, #12]
 80024cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80024d0:	3402      	adds	r4, #2
 80024d2:	9305      	str	r3, [sp, #20]
 80024d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002598 <_svfiprintf_r+0x1f4>
 80024d8:	7821      	ldrb	r1, [r4, #0]
 80024da:	2203      	movs	r2, #3
 80024dc:	4650      	mov	r0, sl
 80024de:	f7fd fe5f 	bl	80001a0 <memchr>
 80024e2:	b138      	cbz	r0, 80024f4 <_svfiprintf_r+0x150>
 80024e4:	9b04      	ldr	r3, [sp, #16]
 80024e6:	eba0 000a 	sub.w	r0, r0, sl
 80024ea:	2240      	movs	r2, #64	@ 0x40
 80024ec:	4082      	lsls	r2, r0
 80024ee:	4313      	orrs	r3, r2
 80024f0:	3401      	adds	r4, #1
 80024f2:	9304      	str	r3, [sp, #16]
 80024f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024f8:	4824      	ldr	r0, [pc, #144]	@ (800258c <_svfiprintf_r+0x1e8>)
 80024fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024fe:	2206      	movs	r2, #6
 8002500:	f7fd fe4e 	bl	80001a0 <memchr>
 8002504:	2800      	cmp	r0, #0
 8002506:	d036      	beq.n	8002576 <_svfiprintf_r+0x1d2>
 8002508:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <_svfiprintf_r+0x1ec>)
 800250a:	bb1b      	cbnz	r3, 8002554 <_svfiprintf_r+0x1b0>
 800250c:	9b03      	ldr	r3, [sp, #12]
 800250e:	3307      	adds	r3, #7
 8002510:	f023 0307 	bic.w	r3, r3, #7
 8002514:	3308      	adds	r3, #8
 8002516:	9303      	str	r3, [sp, #12]
 8002518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800251a:	4433      	add	r3, r6
 800251c:	9309      	str	r3, [sp, #36]	@ 0x24
 800251e:	e76a      	b.n	80023f6 <_svfiprintf_r+0x52>
 8002520:	fb0c 3202 	mla	r2, ip, r2, r3
 8002524:	460c      	mov	r4, r1
 8002526:	2001      	movs	r0, #1
 8002528:	e7a8      	b.n	800247c <_svfiprintf_r+0xd8>
 800252a:	2300      	movs	r3, #0
 800252c:	3401      	adds	r4, #1
 800252e:	9305      	str	r3, [sp, #20]
 8002530:	4619      	mov	r1, r3
 8002532:	f04f 0c0a 	mov.w	ip, #10
 8002536:	4620      	mov	r0, r4
 8002538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800253c:	3a30      	subs	r2, #48	@ 0x30
 800253e:	2a09      	cmp	r2, #9
 8002540:	d903      	bls.n	800254a <_svfiprintf_r+0x1a6>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0c6      	beq.n	80024d4 <_svfiprintf_r+0x130>
 8002546:	9105      	str	r1, [sp, #20]
 8002548:	e7c4      	b.n	80024d4 <_svfiprintf_r+0x130>
 800254a:	fb0c 2101 	mla	r1, ip, r1, r2
 800254e:	4604      	mov	r4, r0
 8002550:	2301      	movs	r3, #1
 8002552:	e7f0      	b.n	8002536 <_svfiprintf_r+0x192>
 8002554:	ab03      	add	r3, sp, #12
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	462a      	mov	r2, r5
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <_svfiprintf_r+0x1f0>)
 800255c:	a904      	add	r1, sp, #16
 800255e:	4638      	mov	r0, r7
 8002560:	f3af 8000 	nop.w
 8002564:	1c42      	adds	r2, r0, #1
 8002566:	4606      	mov	r6, r0
 8002568:	d1d6      	bne.n	8002518 <_svfiprintf_r+0x174>
 800256a:	89ab      	ldrh	r3, [r5, #12]
 800256c:	065b      	lsls	r3, r3, #25
 800256e:	f53f af2d 	bmi.w	80023cc <_svfiprintf_r+0x28>
 8002572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002574:	e72c      	b.n	80023d0 <_svfiprintf_r+0x2c>
 8002576:	ab03      	add	r3, sp, #12
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	462a      	mov	r2, r5
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <_svfiprintf_r+0x1f0>)
 800257e:	a904      	add	r1, sp, #16
 8002580:	4638      	mov	r0, r7
 8002582:	f000 f879 	bl	8002678 <_printf_i>
 8002586:	e7ed      	b.n	8002564 <_svfiprintf_r+0x1c0>
 8002588:	08002ca4 	.word	0x08002ca4
 800258c:	08002cae 	.word	0x08002cae
 8002590:	00000000 	.word	0x00000000
 8002594:	080022e5 	.word	0x080022e5
 8002598:	08002caa 	.word	0x08002caa

0800259c <_printf_common>:
 800259c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a0:	4616      	mov	r6, r2
 80025a2:	4698      	mov	r8, r3
 80025a4:	688a      	ldr	r2, [r1, #8]
 80025a6:	690b      	ldr	r3, [r1, #16]
 80025a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80025ac:	4293      	cmp	r3, r2
 80025ae:	bfb8      	it	lt
 80025b0:	4613      	movlt	r3, r2
 80025b2:	6033      	str	r3, [r6, #0]
 80025b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80025b8:	4607      	mov	r7, r0
 80025ba:	460c      	mov	r4, r1
 80025bc:	b10a      	cbz	r2, 80025c2 <_printf_common+0x26>
 80025be:	3301      	adds	r3, #1
 80025c0:	6033      	str	r3, [r6, #0]
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	0699      	lsls	r1, r3, #26
 80025c6:	bf42      	ittt	mi
 80025c8:	6833      	ldrmi	r3, [r6, #0]
 80025ca:	3302      	addmi	r3, #2
 80025cc:	6033      	strmi	r3, [r6, #0]
 80025ce:	6825      	ldr	r5, [r4, #0]
 80025d0:	f015 0506 	ands.w	r5, r5, #6
 80025d4:	d106      	bne.n	80025e4 <_printf_common+0x48>
 80025d6:	f104 0a19 	add.w	sl, r4, #25
 80025da:	68e3      	ldr	r3, [r4, #12]
 80025dc:	6832      	ldr	r2, [r6, #0]
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	42ab      	cmp	r3, r5
 80025e2:	dc26      	bgt.n	8002632 <_printf_common+0x96>
 80025e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	3b00      	subs	r3, #0
 80025ec:	bf18      	it	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	0692      	lsls	r2, r2, #26
 80025f2:	d42b      	bmi.n	800264c <_printf_common+0xb0>
 80025f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025f8:	4641      	mov	r1, r8
 80025fa:	4638      	mov	r0, r7
 80025fc:	47c8      	blx	r9
 80025fe:	3001      	adds	r0, #1
 8002600:	d01e      	beq.n	8002640 <_printf_common+0xa4>
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	6922      	ldr	r2, [r4, #16]
 8002606:	f003 0306 	and.w	r3, r3, #6
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf02      	ittt	eq
 800260e:	68e5      	ldreq	r5, [r4, #12]
 8002610:	6833      	ldreq	r3, [r6, #0]
 8002612:	1aed      	subeq	r5, r5, r3
 8002614:	68a3      	ldr	r3, [r4, #8]
 8002616:	bf0c      	ite	eq
 8002618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800261c:	2500      	movne	r5, #0
 800261e:	4293      	cmp	r3, r2
 8002620:	bfc4      	itt	gt
 8002622:	1a9b      	subgt	r3, r3, r2
 8002624:	18ed      	addgt	r5, r5, r3
 8002626:	2600      	movs	r6, #0
 8002628:	341a      	adds	r4, #26
 800262a:	42b5      	cmp	r5, r6
 800262c:	d11a      	bne.n	8002664 <_printf_common+0xc8>
 800262e:	2000      	movs	r0, #0
 8002630:	e008      	b.n	8002644 <_printf_common+0xa8>
 8002632:	2301      	movs	r3, #1
 8002634:	4652      	mov	r2, sl
 8002636:	4641      	mov	r1, r8
 8002638:	4638      	mov	r0, r7
 800263a:	47c8      	blx	r9
 800263c:	3001      	adds	r0, #1
 800263e:	d103      	bne.n	8002648 <_printf_common+0xac>
 8002640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002648:	3501      	adds	r5, #1
 800264a:	e7c6      	b.n	80025da <_printf_common+0x3e>
 800264c:	18e1      	adds	r1, r4, r3
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	2030      	movs	r0, #48	@ 0x30
 8002652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002656:	4422      	add	r2, r4
 8002658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800265c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002660:	3302      	adds	r3, #2
 8002662:	e7c7      	b.n	80025f4 <_printf_common+0x58>
 8002664:	2301      	movs	r3, #1
 8002666:	4622      	mov	r2, r4
 8002668:	4641      	mov	r1, r8
 800266a:	4638      	mov	r0, r7
 800266c:	47c8      	blx	r9
 800266e:	3001      	adds	r0, #1
 8002670:	d0e6      	beq.n	8002640 <_printf_common+0xa4>
 8002672:	3601      	adds	r6, #1
 8002674:	e7d9      	b.n	800262a <_printf_common+0x8e>
	...

08002678 <_printf_i>:
 8002678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800267c:	7e0f      	ldrb	r7, [r1, #24]
 800267e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002680:	2f78      	cmp	r7, #120	@ 0x78
 8002682:	4691      	mov	r9, r2
 8002684:	4680      	mov	r8, r0
 8002686:	460c      	mov	r4, r1
 8002688:	469a      	mov	sl, r3
 800268a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800268e:	d807      	bhi.n	80026a0 <_printf_i+0x28>
 8002690:	2f62      	cmp	r7, #98	@ 0x62
 8002692:	d80a      	bhi.n	80026aa <_printf_i+0x32>
 8002694:	2f00      	cmp	r7, #0
 8002696:	f000 80d2 	beq.w	800283e <_printf_i+0x1c6>
 800269a:	2f58      	cmp	r7, #88	@ 0x58
 800269c:	f000 80b7 	beq.w	800280e <_printf_i+0x196>
 80026a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80026a8:	e03a      	b.n	8002720 <_printf_i+0xa8>
 80026aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80026ae:	2b15      	cmp	r3, #21
 80026b0:	d8f6      	bhi.n	80026a0 <_printf_i+0x28>
 80026b2:	a101      	add	r1, pc, #4	@ (adr r1, 80026b8 <_printf_i+0x40>)
 80026b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026b8:	08002711 	.word	0x08002711
 80026bc:	08002725 	.word	0x08002725
 80026c0:	080026a1 	.word	0x080026a1
 80026c4:	080026a1 	.word	0x080026a1
 80026c8:	080026a1 	.word	0x080026a1
 80026cc:	080026a1 	.word	0x080026a1
 80026d0:	08002725 	.word	0x08002725
 80026d4:	080026a1 	.word	0x080026a1
 80026d8:	080026a1 	.word	0x080026a1
 80026dc:	080026a1 	.word	0x080026a1
 80026e0:	080026a1 	.word	0x080026a1
 80026e4:	08002825 	.word	0x08002825
 80026e8:	0800274f 	.word	0x0800274f
 80026ec:	080027db 	.word	0x080027db
 80026f0:	080026a1 	.word	0x080026a1
 80026f4:	080026a1 	.word	0x080026a1
 80026f8:	08002847 	.word	0x08002847
 80026fc:	080026a1 	.word	0x080026a1
 8002700:	0800274f 	.word	0x0800274f
 8002704:	080026a1 	.word	0x080026a1
 8002708:	080026a1 	.word	0x080026a1
 800270c:	080027e3 	.word	0x080027e3
 8002710:	6833      	ldr	r3, [r6, #0]
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6032      	str	r2, [r6, #0]
 8002718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800271c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002720:	2301      	movs	r3, #1
 8002722:	e09d      	b.n	8002860 <_printf_i+0x1e8>
 8002724:	6833      	ldr	r3, [r6, #0]
 8002726:	6820      	ldr	r0, [r4, #0]
 8002728:	1d19      	adds	r1, r3, #4
 800272a:	6031      	str	r1, [r6, #0]
 800272c:	0606      	lsls	r6, r0, #24
 800272e:	d501      	bpl.n	8002734 <_printf_i+0xbc>
 8002730:	681d      	ldr	r5, [r3, #0]
 8002732:	e003      	b.n	800273c <_printf_i+0xc4>
 8002734:	0645      	lsls	r5, r0, #25
 8002736:	d5fb      	bpl.n	8002730 <_printf_i+0xb8>
 8002738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800273c:	2d00      	cmp	r5, #0
 800273e:	da03      	bge.n	8002748 <_printf_i+0xd0>
 8002740:	232d      	movs	r3, #45	@ 0x2d
 8002742:	426d      	negs	r5, r5
 8002744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002748:	4859      	ldr	r0, [pc, #356]	@ (80028b0 <_printf_i+0x238>)
 800274a:	230a      	movs	r3, #10
 800274c:	e010      	b.n	8002770 <_printf_i+0xf8>
 800274e:	6821      	ldr	r1, [r4, #0]
 8002750:	6833      	ldr	r3, [r6, #0]
 8002752:	0608      	lsls	r0, r1, #24
 8002754:	f853 5b04 	ldr.w	r5, [r3], #4
 8002758:	d402      	bmi.n	8002760 <_printf_i+0xe8>
 800275a:	0649      	lsls	r1, r1, #25
 800275c:	bf48      	it	mi
 800275e:	b2ad      	uxthmi	r5, r5
 8002760:	2f6f      	cmp	r7, #111	@ 0x6f
 8002762:	4853      	ldr	r0, [pc, #332]	@ (80028b0 <_printf_i+0x238>)
 8002764:	6033      	str	r3, [r6, #0]
 8002766:	d159      	bne.n	800281c <_printf_i+0x1a4>
 8002768:	2308      	movs	r3, #8
 800276a:	2100      	movs	r1, #0
 800276c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002770:	6866      	ldr	r6, [r4, #4]
 8002772:	60a6      	str	r6, [r4, #8]
 8002774:	2e00      	cmp	r6, #0
 8002776:	db05      	blt.n	8002784 <_printf_i+0x10c>
 8002778:	6821      	ldr	r1, [r4, #0]
 800277a:	432e      	orrs	r6, r5
 800277c:	f021 0104 	bic.w	r1, r1, #4
 8002780:	6021      	str	r1, [r4, #0]
 8002782:	d04d      	beq.n	8002820 <_printf_i+0x1a8>
 8002784:	4616      	mov	r6, r2
 8002786:	fbb5 f1f3 	udiv	r1, r5, r3
 800278a:	fb03 5711 	mls	r7, r3, r1, r5
 800278e:	5dc7      	ldrb	r7, [r0, r7]
 8002790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002794:	462f      	mov	r7, r5
 8002796:	42bb      	cmp	r3, r7
 8002798:	460d      	mov	r5, r1
 800279a:	d9f4      	bls.n	8002786 <_printf_i+0x10e>
 800279c:	2b08      	cmp	r3, #8
 800279e:	d10b      	bne.n	80027b8 <_printf_i+0x140>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	07df      	lsls	r7, r3, #31
 80027a4:	d508      	bpl.n	80027b8 <_printf_i+0x140>
 80027a6:	6923      	ldr	r3, [r4, #16]
 80027a8:	6861      	ldr	r1, [r4, #4]
 80027aa:	4299      	cmp	r1, r3
 80027ac:	bfde      	ittt	le
 80027ae:	2330      	movle	r3, #48	@ 0x30
 80027b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80027b8:	1b92      	subs	r2, r2, r6
 80027ba:	6122      	str	r2, [r4, #16]
 80027bc:	f8cd a000 	str.w	sl, [sp]
 80027c0:	464b      	mov	r3, r9
 80027c2:	aa03      	add	r2, sp, #12
 80027c4:	4621      	mov	r1, r4
 80027c6:	4640      	mov	r0, r8
 80027c8:	f7ff fee8 	bl	800259c <_printf_common>
 80027cc:	3001      	adds	r0, #1
 80027ce:	d14c      	bne.n	800286a <_printf_i+0x1f2>
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027d4:	b004      	add	sp, #16
 80027d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	4834      	ldr	r0, [pc, #208]	@ (80028b4 <_printf_i+0x23c>)
 80027e4:	2778      	movs	r7, #120	@ 0x78
 80027e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	6831      	ldr	r1, [r6, #0]
 80027ee:	061f      	lsls	r7, r3, #24
 80027f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80027f4:	d402      	bmi.n	80027fc <_printf_i+0x184>
 80027f6:	065f      	lsls	r7, r3, #25
 80027f8:	bf48      	it	mi
 80027fa:	b2ad      	uxthmi	r5, r5
 80027fc:	6031      	str	r1, [r6, #0]
 80027fe:	07d9      	lsls	r1, r3, #31
 8002800:	bf44      	itt	mi
 8002802:	f043 0320 	orrmi.w	r3, r3, #32
 8002806:	6023      	strmi	r3, [r4, #0]
 8002808:	b11d      	cbz	r5, 8002812 <_printf_i+0x19a>
 800280a:	2310      	movs	r3, #16
 800280c:	e7ad      	b.n	800276a <_printf_i+0xf2>
 800280e:	4828      	ldr	r0, [pc, #160]	@ (80028b0 <_printf_i+0x238>)
 8002810:	e7e9      	b.n	80027e6 <_printf_i+0x16e>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	f023 0320 	bic.w	r3, r3, #32
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	e7f6      	b.n	800280a <_printf_i+0x192>
 800281c:	230a      	movs	r3, #10
 800281e:	e7a4      	b.n	800276a <_printf_i+0xf2>
 8002820:	4616      	mov	r6, r2
 8002822:	e7bb      	b.n	800279c <_printf_i+0x124>
 8002824:	6833      	ldr	r3, [r6, #0]
 8002826:	6825      	ldr	r5, [r4, #0]
 8002828:	6961      	ldr	r1, [r4, #20]
 800282a:	1d18      	adds	r0, r3, #4
 800282c:	6030      	str	r0, [r6, #0]
 800282e:	062e      	lsls	r6, r5, #24
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	d501      	bpl.n	8002838 <_printf_i+0x1c0>
 8002834:	6019      	str	r1, [r3, #0]
 8002836:	e002      	b.n	800283e <_printf_i+0x1c6>
 8002838:	0668      	lsls	r0, r5, #25
 800283a:	d5fb      	bpl.n	8002834 <_printf_i+0x1bc>
 800283c:	8019      	strh	r1, [r3, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	6123      	str	r3, [r4, #16]
 8002842:	4616      	mov	r6, r2
 8002844:	e7ba      	b.n	80027bc <_printf_i+0x144>
 8002846:	6833      	ldr	r3, [r6, #0]
 8002848:	1d1a      	adds	r2, r3, #4
 800284a:	6032      	str	r2, [r6, #0]
 800284c:	681e      	ldr	r6, [r3, #0]
 800284e:	6862      	ldr	r2, [r4, #4]
 8002850:	2100      	movs	r1, #0
 8002852:	4630      	mov	r0, r6
 8002854:	f7fd fca4 	bl	80001a0 <memchr>
 8002858:	b108      	cbz	r0, 800285e <_printf_i+0x1e6>
 800285a:	1b80      	subs	r0, r0, r6
 800285c:	6060      	str	r0, [r4, #4]
 800285e:	6863      	ldr	r3, [r4, #4]
 8002860:	6123      	str	r3, [r4, #16]
 8002862:	2300      	movs	r3, #0
 8002864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002868:	e7a8      	b.n	80027bc <_printf_i+0x144>
 800286a:	6923      	ldr	r3, [r4, #16]
 800286c:	4632      	mov	r2, r6
 800286e:	4649      	mov	r1, r9
 8002870:	4640      	mov	r0, r8
 8002872:	47d0      	blx	sl
 8002874:	3001      	adds	r0, #1
 8002876:	d0ab      	beq.n	80027d0 <_printf_i+0x158>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	079b      	lsls	r3, r3, #30
 800287c:	d413      	bmi.n	80028a6 <_printf_i+0x22e>
 800287e:	68e0      	ldr	r0, [r4, #12]
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	4298      	cmp	r0, r3
 8002884:	bfb8      	it	lt
 8002886:	4618      	movlt	r0, r3
 8002888:	e7a4      	b.n	80027d4 <_printf_i+0x15c>
 800288a:	2301      	movs	r3, #1
 800288c:	4632      	mov	r2, r6
 800288e:	4649      	mov	r1, r9
 8002890:	4640      	mov	r0, r8
 8002892:	47d0      	blx	sl
 8002894:	3001      	adds	r0, #1
 8002896:	d09b      	beq.n	80027d0 <_printf_i+0x158>
 8002898:	3501      	adds	r5, #1
 800289a:	68e3      	ldr	r3, [r4, #12]
 800289c:	9903      	ldr	r1, [sp, #12]
 800289e:	1a5b      	subs	r3, r3, r1
 80028a0:	42ab      	cmp	r3, r5
 80028a2:	dcf2      	bgt.n	800288a <_printf_i+0x212>
 80028a4:	e7eb      	b.n	800287e <_printf_i+0x206>
 80028a6:	2500      	movs	r5, #0
 80028a8:	f104 0619 	add.w	r6, r4, #25
 80028ac:	e7f5      	b.n	800289a <_printf_i+0x222>
 80028ae:	bf00      	nop
 80028b0:	08002cb5 	.word	0x08002cb5
 80028b4:	08002cc6 	.word	0x08002cc6

080028b8 <memmove>:
 80028b8:	4288      	cmp	r0, r1
 80028ba:	b510      	push	{r4, lr}
 80028bc:	eb01 0402 	add.w	r4, r1, r2
 80028c0:	d902      	bls.n	80028c8 <memmove+0x10>
 80028c2:	4284      	cmp	r4, r0
 80028c4:	4623      	mov	r3, r4
 80028c6:	d807      	bhi.n	80028d8 <memmove+0x20>
 80028c8:	1e43      	subs	r3, r0, #1
 80028ca:	42a1      	cmp	r1, r4
 80028cc:	d007      	beq.n	80028de <memmove+0x26>
 80028ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028d6:	e7f8      	b.n	80028ca <memmove+0x12>
 80028d8:	4402      	add	r2, r0
 80028da:	4282      	cmp	r2, r0
 80028dc:	d100      	bne.n	80028e0 <memmove+0x28>
 80028de:	bd10      	pop	{r4, pc}
 80028e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80028e4:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80028e8:	e7f7      	b.n	80028da <memmove+0x22>
	...

080028ec <_sbrk_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4d06      	ldr	r5, [pc, #24]	@ (8002908 <_sbrk_r+0x1c>)
 80028f0:	2300      	movs	r3, #0
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fd ff74 	bl	80007e4 <_sbrk>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_sbrk_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_sbrk_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	20000200 	.word	0x20000200

0800290c <memcpy>:
 800290c:	440a      	add	r2, r1
 800290e:	4291      	cmp	r1, r2
 8002910:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002914:	d100      	bne.n	8002918 <memcpy+0xc>
 8002916:	4770      	bx	lr
 8002918:	b510      	push	{r4, lr}
 800291a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800291e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002922:	4291      	cmp	r1, r2
 8002924:	d1f9      	bne.n	800291a <memcpy+0xe>
 8002926:	bd10      	pop	{r4, pc}

08002928 <_realloc_r>:
 8002928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292c:	4607      	mov	r7, r0
 800292e:	4614      	mov	r4, r2
 8002930:	460d      	mov	r5, r1
 8002932:	b921      	cbnz	r1, 800293e <_realloc_r+0x16>
 8002934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002938:	4611      	mov	r1, r2
 800293a:	f7ff bc47 	b.w	80021cc <_malloc_r>
 800293e:	b92a      	cbnz	r2, 800294c <_realloc_r+0x24>
 8002940:	f7ff fbd8 	bl	80020f4 <_free_r>
 8002944:	4625      	mov	r5, r4
 8002946:	4628      	mov	r0, r5
 8002948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800294c:	f000 f81a 	bl	8002984 <_malloc_usable_size_r>
 8002950:	4284      	cmp	r4, r0
 8002952:	4606      	mov	r6, r0
 8002954:	d802      	bhi.n	800295c <_realloc_r+0x34>
 8002956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800295a:	d8f4      	bhi.n	8002946 <_realloc_r+0x1e>
 800295c:	4621      	mov	r1, r4
 800295e:	4638      	mov	r0, r7
 8002960:	f7ff fc34 	bl	80021cc <_malloc_r>
 8002964:	4680      	mov	r8, r0
 8002966:	b908      	cbnz	r0, 800296c <_realloc_r+0x44>
 8002968:	4645      	mov	r5, r8
 800296a:	e7ec      	b.n	8002946 <_realloc_r+0x1e>
 800296c:	42b4      	cmp	r4, r6
 800296e:	4622      	mov	r2, r4
 8002970:	4629      	mov	r1, r5
 8002972:	bf28      	it	cs
 8002974:	4632      	movcs	r2, r6
 8002976:	f7ff ffc9 	bl	800290c <memcpy>
 800297a:	4629      	mov	r1, r5
 800297c:	4638      	mov	r0, r7
 800297e:	f7ff fbb9 	bl	80020f4 <_free_r>
 8002982:	e7f1      	b.n	8002968 <_realloc_r+0x40>

08002984 <_malloc_usable_size_r>:
 8002984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002988:	1f18      	subs	r0, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	bfbc      	itt	lt
 800298e:	580b      	ldrlt	r3, [r1, r0]
 8002990:	18c0      	addlt	r0, r0, r3
 8002992:	4770      	bx	lr

08002994 <__udivmoddi4>:
 8002994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	468c      	mov	ip, r1
 800299a:	468e      	mov	lr, r1
 800299c:	9e08      	ldr	r6, [sp, #32]
 800299e:	4615      	mov	r5, r2
 80029a0:	4604      	mov	r4, r0
 80029a2:	4619      	mov	r1, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 80d0 	bne.w	8002b4a <__udivmoddi4+0x1b6>
 80029aa:	4572      	cmp	r2, lr
 80029ac:	d947      	bls.n	8002a3e <__udivmoddi4+0xaa>
 80029ae:	fab2 f782 	clz	r7, r2
 80029b2:	b14f      	cbz	r7, 80029c8 <__udivmoddi4+0x34>
 80029b4:	f1c7 0320 	rsb	r3, r7, #32
 80029b8:	fa0e fc07 	lsl.w	ip, lr, r7
 80029bc:	fa20 f303 	lsr.w	r3, r0, r3
 80029c0:	40bd      	lsls	r5, r7
 80029c2:	ea43 0c0c 	orr.w	ip, r3, ip
 80029c6:	40bc      	lsls	r4, r7
 80029c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80029cc:	b2a8      	uxth	r0, r5
 80029ce:	fbbc f8fe 	udiv	r8, ip, lr
 80029d2:	0c23      	lsrs	r3, r4, #16
 80029d4:	fb0e cc18 	mls	ip, lr, r8, ip
 80029d8:	fb08 f900 	mul.w	r9, r8, r0
 80029dc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80029e0:	4599      	cmp	r9, r3
 80029e2:	d928      	bls.n	8002a36 <__udivmoddi4+0xa2>
 80029e4:	18eb      	adds	r3, r5, r3
 80029e6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80029ea:	d204      	bcs.n	80029f6 <__udivmoddi4+0x62>
 80029ec:	4599      	cmp	r9, r3
 80029ee:	d902      	bls.n	80029f6 <__udivmoddi4+0x62>
 80029f0:	f1a8 0202 	sub.w	r2, r8, #2
 80029f4:	442b      	add	r3, r5
 80029f6:	eba3 0309 	sub.w	r3, r3, r9
 80029fa:	b2a4      	uxth	r4, r4
 80029fc:	fbb3 fcfe 	udiv	ip, r3, lr
 8002a00:	fb0e 331c 	mls	r3, lr, ip, r3
 8002a04:	fb0c f000 	mul.w	r0, ip, r0
 8002a08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002a0c:	42a0      	cmp	r0, r4
 8002a0e:	d914      	bls.n	8002a3a <__udivmoddi4+0xa6>
 8002a10:	192c      	adds	r4, r5, r4
 8002a12:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8002a16:	d204      	bcs.n	8002a22 <__udivmoddi4+0x8e>
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d902      	bls.n	8002a22 <__udivmoddi4+0x8e>
 8002a1c:	f1ac 0302 	sub.w	r3, ip, #2
 8002a20:	442c      	add	r4, r5
 8002a22:	1a24      	subs	r4, r4, r0
 8002a24:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8002a28:	b11e      	cbz	r6, 8002a32 <__udivmoddi4+0x9e>
 8002a2a:	40fc      	lsrs	r4, r7
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6034      	str	r4, [r6, #0]
 8002a30:	6073      	str	r3, [r6, #4]
 8002a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a36:	4642      	mov	r2, r8
 8002a38:	e7dd      	b.n	80029f6 <__udivmoddi4+0x62>
 8002a3a:	4663      	mov	r3, ip
 8002a3c:	e7f1      	b.n	8002a22 <__udivmoddi4+0x8e>
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d079      	beq.n	8002b36 <__udivmoddi4+0x1a2>
 8002a42:	fab2 f382 	clz	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03f      	beq.n	8002aca <__udivmoddi4+0x136>
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f1c1 0320 	rsb	r3, r1, #32
 8002a50:	fa02 f501 	lsl.w	r5, r2, r1
 8002a54:	fa2e f203 	lsr.w	r2, lr, r3
 8002a58:	fa0e fe01 	lsl.w	lr, lr, r1
 8002a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8002a60:	ea43 030e 	orr.w	r3, r3, lr
 8002a64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002a68:	fa00 f401 	lsl.w	r4, r0, r1
 8002a6c:	fbb2 fcfe 	udiv	ip, r2, lr
 8002a70:	b2af      	uxth	r7, r5
 8002a72:	fb0e 201c 	mls	r0, lr, ip, r2
 8002a76:	0c1a      	lsrs	r2, r3, #16
 8002a78:	fb0c f807 	mul.w	r8, ip, r7
 8002a7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a80:	4590      	cmp	r8, r2
 8002a82:	d95a      	bls.n	8002b3a <__udivmoddi4+0x1a6>
 8002a84:	18aa      	adds	r2, r5, r2
 8002a86:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8002a8a:	d204      	bcs.n	8002a96 <__udivmoddi4+0x102>
 8002a8c:	4590      	cmp	r8, r2
 8002a8e:	d902      	bls.n	8002a96 <__udivmoddi4+0x102>
 8002a90:	f1ac 0002 	sub.w	r0, ip, #2
 8002a94:	442a      	add	r2, r5
 8002a96:	eba2 0208 	sub.w	r2, r2, r8
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	fbb2 fcfe 	udiv	ip, r2, lr
 8002aa0:	fb0e 221c 	mls	r2, lr, ip, r2
 8002aa4:	fb0c f707 	mul.w	r7, ip, r7
 8002aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002aac:	429f      	cmp	r7, r3
 8002aae:	d946      	bls.n	8002b3e <__udivmoddi4+0x1aa>
 8002ab0:	18eb      	adds	r3, r5, r3
 8002ab2:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8002ab6:	d204      	bcs.n	8002ac2 <__udivmoddi4+0x12e>
 8002ab8:	429f      	cmp	r7, r3
 8002aba:	d902      	bls.n	8002ac2 <__udivmoddi4+0x12e>
 8002abc:	f1ac 0202 	sub.w	r2, ip, #2
 8002ac0:	442b      	add	r3, r5
 8002ac2:	1bdb      	subs	r3, r3, r7
 8002ac4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002ac8:	e002      	b.n	8002ad0 <__udivmoddi4+0x13c>
 8002aca:	ebae 0302 	sub.w	r3, lr, r2
 8002ace:	2201      	movs	r2, #1
 8002ad0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002ad4:	b2af      	uxth	r7, r5
 8002ad6:	fbb3 fcfe 	udiv	ip, r3, lr
 8002ada:	0c20      	lsrs	r0, r4, #16
 8002adc:	fb0e 331c 	mls	r3, lr, ip, r3
 8002ae0:	fb0c f807 	mul.w	r8, ip, r7
 8002ae4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8002ae8:	4598      	cmp	r8, r3
 8002aea:	d92a      	bls.n	8002b42 <__udivmoddi4+0x1ae>
 8002aec:	18eb      	adds	r3, r5, r3
 8002aee:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8002af2:	d204      	bcs.n	8002afe <__udivmoddi4+0x16a>
 8002af4:	4598      	cmp	r8, r3
 8002af6:	d902      	bls.n	8002afe <__udivmoddi4+0x16a>
 8002af8:	f1ac 0002 	sub.w	r0, ip, #2
 8002afc:	442b      	add	r3, r5
 8002afe:	eba3 0308 	sub.w	r3, r3, r8
 8002b02:	b2a4      	uxth	r4, r4
 8002b04:	fbb3 fcfe 	udiv	ip, r3, lr
 8002b08:	fb0e 331c 	mls	r3, lr, ip, r3
 8002b0c:	fb0c f707 	mul.w	r7, ip, r7
 8002b10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002b14:	42a7      	cmp	r7, r4
 8002b16:	d916      	bls.n	8002b46 <__udivmoddi4+0x1b2>
 8002b18:	192c      	adds	r4, r5, r4
 8002b1a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8002b1e:	d204      	bcs.n	8002b2a <__udivmoddi4+0x196>
 8002b20:	42a7      	cmp	r7, r4
 8002b22:	d902      	bls.n	8002b2a <__udivmoddi4+0x196>
 8002b24:	f1ac 0302 	sub.w	r3, ip, #2
 8002b28:	442c      	add	r4, r5
 8002b2a:	1be4      	subs	r4, r4, r7
 8002b2c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002b30:	460f      	mov	r7, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	e778      	b.n	8002a28 <__udivmoddi4+0x94>
 8002b36:	211f      	movs	r1, #31
 8002b38:	e788      	b.n	8002a4c <__udivmoddi4+0xb8>
 8002b3a:	4660      	mov	r0, ip
 8002b3c:	e7ab      	b.n	8002a96 <__udivmoddi4+0x102>
 8002b3e:	4662      	mov	r2, ip
 8002b40:	e7bf      	b.n	8002ac2 <__udivmoddi4+0x12e>
 8002b42:	4660      	mov	r0, ip
 8002b44:	e7db      	b.n	8002afe <__udivmoddi4+0x16a>
 8002b46:	4663      	mov	r3, ip
 8002b48:	e7ef      	b.n	8002b2a <__udivmoddi4+0x196>
 8002b4a:	4573      	cmp	r3, lr
 8002b4c:	d906      	bls.n	8002b5c <__udivmoddi4+0x1c8>
 8002b4e:	b916      	cbnz	r6, 8002b56 <__udivmoddi4+0x1c2>
 8002b50:	2100      	movs	r1, #0
 8002b52:	4608      	mov	r0, r1
 8002b54:	e76d      	b.n	8002a32 <__udivmoddi4+0x9e>
 8002b56:	e9c6 0e00 	strd	r0, lr, [r6]
 8002b5a:	e7f9      	b.n	8002b50 <__udivmoddi4+0x1bc>
 8002b5c:	fab3 f783 	clz	r7, r3
 8002b60:	b987      	cbnz	r7, 8002b84 <__udivmoddi4+0x1f0>
 8002b62:	4573      	cmp	r3, lr
 8002b64:	d301      	bcc.n	8002b6a <__udivmoddi4+0x1d6>
 8002b66:	4282      	cmp	r2, r0
 8002b68:	d807      	bhi.n	8002b7a <__udivmoddi4+0x1e6>
 8002b6a:	1a84      	subs	r4, r0, r2
 8002b6c:	eb6e 0303 	sbc.w	r3, lr, r3
 8002b70:	2001      	movs	r0, #1
 8002b72:	469c      	mov	ip, r3
 8002b74:	b91e      	cbnz	r6, 8002b7e <__udivmoddi4+0x1ea>
 8002b76:	2100      	movs	r1, #0
 8002b78:	e75b      	b.n	8002a32 <__udivmoddi4+0x9e>
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	e7fa      	b.n	8002b74 <__udivmoddi4+0x1e0>
 8002b7e:	e9c6 4c00 	strd	r4, ip, [r6]
 8002b82:	e7f8      	b.n	8002b76 <__udivmoddi4+0x1e2>
 8002b84:	f1c7 0c20 	rsb	ip, r7, #32
 8002b88:	40bb      	lsls	r3, r7
 8002b8a:	fa22 f50c 	lsr.w	r5, r2, ip
 8002b8e:	431d      	orrs	r5, r3
 8002b90:	fa20 f10c 	lsr.w	r1, r0, ip
 8002b94:	fa2e f30c 	lsr.w	r3, lr, ip
 8002b98:	fa0e fe07 	lsl.w	lr, lr, r7
 8002b9c:	ea41 010e 	orr.w	r1, r1, lr
 8002ba0:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8002ba4:	fa00 f407 	lsl.w	r4, r0, r7
 8002ba8:	fbb3 f8f9 	udiv	r8, r3, r9
 8002bac:	fa1f fe85 	uxth.w	lr, r5
 8002bb0:	fb09 3018 	mls	r0, r9, r8, r3
 8002bb4:	0c0b      	lsrs	r3, r1, #16
 8002bb6:	fb08 fa0e 	mul.w	sl, r8, lr
 8002bba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002bbe:	459a      	cmp	sl, r3
 8002bc0:	fa02 f207 	lsl.w	r2, r2, r7
 8002bc4:	d940      	bls.n	8002c48 <__udivmoddi4+0x2b4>
 8002bc6:	18eb      	adds	r3, r5, r3
 8002bc8:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8002bcc:	d204      	bcs.n	8002bd8 <__udivmoddi4+0x244>
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d902      	bls.n	8002bd8 <__udivmoddi4+0x244>
 8002bd2:	f1a8 0002 	sub.w	r0, r8, #2
 8002bd6:	442b      	add	r3, r5
 8002bd8:	eba3 030a 	sub.w	r3, r3, sl
 8002bdc:	b289      	uxth	r1, r1
 8002bde:	fbb3 f8f9 	udiv	r8, r3, r9
 8002be2:	fb09 3318 	mls	r3, r9, r8, r3
 8002be6:	fb08 fe0e 	mul.w	lr, r8, lr
 8002bea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002bee:	458e      	cmp	lr, r1
 8002bf0:	d92c      	bls.n	8002c4c <__udivmoddi4+0x2b8>
 8002bf2:	1869      	adds	r1, r5, r1
 8002bf4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8002bf8:	d204      	bcs.n	8002c04 <__udivmoddi4+0x270>
 8002bfa:	458e      	cmp	lr, r1
 8002bfc:	d902      	bls.n	8002c04 <__udivmoddi4+0x270>
 8002bfe:	f1a8 0302 	sub.w	r3, r8, #2
 8002c02:	4429      	add	r1, r5
 8002c04:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002c08:	fba0 9802 	umull	r9, r8, r0, r2
 8002c0c:	eba1 010e 	sub.w	r1, r1, lr
 8002c10:	4541      	cmp	r1, r8
 8002c12:	46ce      	mov	lr, r9
 8002c14:	4643      	mov	r3, r8
 8002c16:	d302      	bcc.n	8002c1e <__udivmoddi4+0x28a>
 8002c18:	d106      	bne.n	8002c28 <__udivmoddi4+0x294>
 8002c1a:	454c      	cmp	r4, r9
 8002c1c:	d204      	bcs.n	8002c28 <__udivmoddi4+0x294>
 8002c1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8002c22:	eb68 0305 	sbc.w	r3, r8, r5
 8002c26:	3801      	subs	r0, #1
 8002c28:	2e00      	cmp	r6, #0
 8002c2a:	d0a4      	beq.n	8002b76 <__udivmoddi4+0x1e2>
 8002c2c:	ebb4 020e 	subs.w	r2, r4, lr
 8002c30:	eb61 0103 	sbc.w	r1, r1, r3
 8002c34:	fa01 fc0c 	lsl.w	ip, r1, ip
 8002c38:	fa22 f307 	lsr.w	r3, r2, r7
 8002c3c:	ea4c 0303 	orr.w	r3, ip, r3
 8002c40:	40f9      	lsrs	r1, r7
 8002c42:	e9c6 3100 	strd	r3, r1, [r6]
 8002c46:	e796      	b.n	8002b76 <__udivmoddi4+0x1e2>
 8002c48:	4640      	mov	r0, r8
 8002c4a:	e7c5      	b.n	8002bd8 <__udivmoddi4+0x244>
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	e7d9      	b.n	8002c04 <__udivmoddi4+0x270>

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
